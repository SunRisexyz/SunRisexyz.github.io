<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Everything</title>
      <link href="/2025/01/20/Everything/"/>
      <url>/2025/01/20/Everything/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索语法"><a href="#搜索语法" class="headerlink" title="搜索语法"></a>搜索语法</h2><blockquote><p><code>space</code> 表示 and , <code>|</code> 表示或, <code>!</code> 表示否</p><p><code>*</code> 表示匹配多个字符 <code>?</code> 匹配一个字符</p><p>dirname\ 搜索条件</p><p><code>?</code> 只能在拓展名里使用</p><p><code>size:</code> <code>file:</code> <code>dm</code> 进行大小文件类型更改时间筛选</p></blockquote><ol><li>如果要搜索多个关键字用空格隔开</li><li>当搜索的文件名里有空格时用双引号 <code>“”</code></li><li>指定文件目录 搜索示例（目录加反斜杠，加空格）system32\ *.txt</li><li><code>|</code> 之间要加空格 <em>.jpg | </em>.png</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Everything的使用 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/19/UploadTest/"/>
      <url>/2025/01/19/UploadTest/</url>
      
        <content type="html"><![CDATA[<h1 id="本文用于测试图片显示"><a href="#本文用于测试图片显示" class="headerlink" title="本文用于测试图片显示"></a>本文用于测试图片显示</h1><p><img src="https://cdn.jsdelivr.net/gh/SunRisexyz/image@main/img/20250119172832690.png" alt="image-20250119171718346"></p><p><img src="https://cdn.jsdelivr.net/gh/SunRisexyz/image@main/img/20250120115751519.png" alt="image-20250120113203295"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人推荐的Windows工具</title>
      <link href="/2025/01/19/%E4%B8%AA%E4%BA%BA%E6%8E%A8%E8%8D%90%E7%9A%84Windows%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/01/19/%E4%B8%AA%E4%BA%BA%E6%8E%A8%E8%8D%90%E7%9A%84Windows%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="火绒-杀毒软件-新机必装"><a href="#火绒-杀毒软件-新机必装" class="headerlink" title="火绒(杀毒软件)(新机必装)"></a>火绒(杀毒软件)(新机必装)</h2><p>相对于 360, 腾讯电脑管家, 金山毒霸等老牌杀毒软件, 火绒的杀毒能力逊色一筹, 但是他的广告拦截能力很强, 下载后基本没有广告</p><h3 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://www.huorong.cn/">https://www.huorong.cn/</a></p><h2 id="Typora-笔记软件"><a href="#Typora-笔记软件" class="headerlink" title="Typora(笔记软件)"></a>Typora(笔记软件)</h2><h3 id="软件展示："><a href="#软件展示：" class="headerlink" title="软件展示："></a>软件展示：</h3><p><img src="../image/个人推荐的Windows工具/screenshots.gif" alt="屏幕录屏"  /></p><h3 id="下载方式-1"><a href="#下载方式-1" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="[https://typoraio.cn/](Typora官方下载">Typora 官方下载</a>)</p><h3 id="个人推荐"><a href="#个人推荐" class="headerlink" title="个人推荐:"></a>个人推荐:</h3><p>正版 Typora 是收费的, 这里我推荐使用破解版</p><p>具体操作可以参考以下文章 <a href="https://blog.csdn.net/qq_61621323/article/details/141036982">Typora 破解方法</a></p><p>(此篇博文就是在 typora 里写的)</p><h2 id="Fences-桌面整理软件"><a href="#Fences-桌面整理软件" class="headerlink" title="Fences(桌面整理软件)"></a>Fences(桌面整理软件)</h2><p>工具效果图如下</p><p><img src="https://cdn.jsdelivr.net/gh/SunRisexyz/image@main/img/20250119165528823.png" alt="image-20250119131407087"/></p><p>网上可以下载到免费版</p><h3 id="下载方式-2"><a href="#下载方式-2" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://soft.3dmgame.com/zt/fences/">Fences 免费版下载</a> 一般 Windows11 下载 64 位版本即可(具体下载版本根据个人电脑版本决定)</p><h2 id="uTools-综合性办公软件-yyds"><a href="#uTools-综合性办公软件-yyds" class="headerlink" title="uTools(综合性办公软件)(yyds)"></a>uTools(综合性办公软件)(yyds)</h2><h3 id="软件界面"><a href="#软件界面" class="headerlink" title="软件界面"></a>软件界面</h3><p><img src="../image/个人推荐的Windows工具/image-20250119132002564.png" alt="小工具" /></p><h3 id="软件用途"><a href="#软件用途" class="headerlink" title="软件用途"></a>软件用途</h3><p>可用于快速查找应用或者是使用快速截图等小工具</p><p>个人常用工具如下<br><img src="../image/个人推荐的Windows工具/image-20250119132357736.png" alt="小工具" /></p><h3 id="下载方式-3"><a href="#下载方式-3" class="headerlink" title="下载方式"></a>下载方式</h3><p><a href="https://u.tools/">官方下载</a> 普通版完全免费(yyds)</p><h2 id="EV-录屏-录屏软件"><a href="#EV-录屏-录屏软件" class="headerlink" title="EV 录屏(录屏软件)"></a>EV 录屏(录屏软件)</h2><h3 id="下载方式-4"><a href="#下载方式-4" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://www.ieway.cn/evcapture.html">官方下载</a></p><h2 id="Everything-EverythingToolBar-全盘文件搜索工具"><a href="#Everything-EverythingToolBar-全盘文件搜索工具" class="headerlink" title="Everything + EverythingToolBar(全盘文件搜索工具)"></a>Everything + EverythingToolBar(全盘文件搜索工具)</h2><h3 id="下载方式-5"><a href="#下载方式-5" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://www.voidtools.com/zh-cn/support/everything/">Everything 官方下载</a></p><p><a href="https://github.com/srwi/EverythingToolbar">EverythingToolBar 插件下载</a> （需要使用梯子访问外网）</p><p>读者可以自行搜索该工具插件进行下载</p><p>使用该插件时 everything 必须运行, 个人推荐将 everything 设为开机自启然后使用插件</p><h3 id="软件用法："><a href="#软件用法：" class="headerlink" title="软件用法："></a>软件用法：</h3><p><img src="../image/个人推荐的Windows工具/250119 152437.gif" alt="文件查找" /></p><h2 id="完美解码-全能的播放器"><a href="#完美解码-全能的播放器" class="headerlink" title="完美解码(全能的播放器)"></a>完美解码(全能的播放器)</h2><p>支持市场上几乎所有的视频音频格式, mp3.mp4.wav 等</p><h3 id="下载方式-6"><a href="#下载方式-6" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://jm.wmzhe.com/">官方下载</a></p><h2 id="QuickLook-无需打开快速预览文件"><a href="#QuickLook-无需打开快速预览文件" class="headerlink" title="QuickLook(无需打开快速预览文件)"></a>QuickLook(无需打开快速预览文件)</h2><h3 id="软件介绍："><a href="#软件介绍：" class="headerlink" title="软件介绍："></a>软件介绍：</h3><p>==适用于 Windows 的快速预览文件==</p><h3 id="使用操作-选中文件点击空格进行预览"><a href="#使用操作-选中文件点击空格进行预览" class="headerlink" title="使用操作: 选中文件点击空格进行预览"></a>使用操作: 选中文件点击空格进行预览</h3><p><img src="../image/个人推荐的Windows工具/250119 151214.gif" alt="快速预览" /></p><h3 id="下载方式-7"><a href="#下载方式-7" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://apps.microsoft.com/detail/9nv4bs3l1h4s?launch">https://apps.microsoft.com/detail/9nv4bs3l1h4s?launch</a> = true&amp;mode = full&amp;hl = zh-cn&amp;gl = cn&amp;ocid = bingwebsearch</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Tools </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java随笔</title>
      <link href="/2024/05/15/Java/"/>
      <url>/2024/05/15/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="易错知识点"><a href="#易错知识点" class="headerlink" title="易错知识点"></a>易错知识点</h2><ol><li>等号=用于比较两个变量的引用（即内存地址）是否相同，而equals用于比较两个变量的内容（即内存地址里存放的值）是否相等</li><li>构造类中方法时要进行空参构造和全参构造</li><li>private只能在本类的方法中使用而protected可以再本类和子类的方法中使用</li><li>Object是所有类的父类,是顶级父类所有类都继承它</li><li>创建对象调用方法时不能为null,否则会报错(空指针异常)</li><li>基本数据类型byte(1字节)short(2字节)int(4字节)long(8字节)</li><li>12315613616L(L表示long类型)</li><li>int是基本数据类型,integer是引用数据类型,integer是一个int的对象可以进行toString()操作</li></ol><h2 id="java-入门"><a href="#java-入门" class="headerlink" title="java 入门"></a>java 入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//nextInt() nextDouble() </span></span><br><span class="line">        <span class="comment">//next()接受字符串，遇到空格制表符回车才停止接受数据 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//nextLine()接受字符串 可以接受空格制表符，回车结束</span></span><br><span class="line">        <span class="comment">//以上两种录入方法是不能混用的</span></span><br><span class="line">        <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">       <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br><span class="line">        System.out.println(<span class="string">&quot;你认识小红&quot;</span>);<span class="comment">//换行输出 line next</span></span><br><span class="line"> System.out.print()</span><br><span class="line">        System.out.print()<span class="comment">//一行输出</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用类时用 Car[] c=new Car();</span></span><br><span class="line">    System.out.println(<span class="string">&quot;你没认识小红&quot;</span>+gf.getName()+<span class="string">&quot;aksjflka&quot;</span>);</span><br><span class="line">    <span class="comment">//字符串对比用str1.equals(str2)</span></span><br><span class="line">    <span class="comment">//String类型内容不可改变&quot;abc&quot;--&gt;&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;--&gt;&quot;Qbc&quot;</span></span><br><span class="line">    <span class="type">byte</span>[] bytes=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;<span class="comment">//byte--&gt;(ascii)</span></span><br><span class="line">    <span class="comment">//byte类型一般在网络传输中使用，传输字节信息---&gt;io流</span></span><br><span class="line">    String s=<span class="keyword">new</span> <span class="title class_">String</span>(btyes);</span><br><span class="line">    System.out.println(s);---&gt;abcd</span><br><span class="line">&#125;</span><br><span class="line">非静态从属于对象，需要区分对象，静态方法从属于类，不需要区分对象</span><br><span class="line">因为<span class="built_in">this</span>它的作用就是指向调用者的地址值啊，<span class="keyword">static</span>全是共享的，就不必要用<span class="built_in">this</span>了</span><br><span class="line">    静态方法不能调用非静态成员变量(对象)</span><br><span class="line">    a(父类) <span class="keyword">instanceof</span> <span class="title function_">Dog</span><span class="params">(子类)</span> d(a是不是Dog类型的,如果是强转成Dog类型并命名为d,不是则<span class="literal">false</span>)</span><br><span class="line">    </span><br><span class="line">    data.fori ===&gt; <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;data;i++)&#123;&#125;</span><br></pre></td></tr></table></figure><p>==static修饰的方法或变量是在创建新类之前就创建了不能用实例调用static，直接用类名调用，只要是静态的东西，都可以类名点直接获取==</p><p>==创建静态内部对象的格式: 外部类名.内部类名 对象名 =new 外部类名.内部类名()==</p><p>编译能否成功看左边 编译结果要看右边</p><p>==调用静态方法的格式: 外部类名.内部类名.方法名()==</p><p>final相当于cpp的const final修饰方法表明此方法不能重写 修饰类不能被继承 修饰变量则只能赋值一次</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ol><li><p>方法形参中最多只能写一个可变参数</p></li><li><p>如果方法中除了可变参数以外还有其他形参,可变参数要写在最后</p></li><li><p>可变参数本质上是一个数组</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>...args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : args) &#123;</span><br><span class="line">            sum += j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="内部类和外部类"><a href="#内部类和外部类" class="headerlink" title="内部类和外部类"></a>内部类和外部类</h3><p>Java 内部类（嵌套类）与外部类之间的关系和特性如下：<br>定义：<br>外部类：正常的类，可以独立存在，不包含在其他类的定义内。<br>内部类（嵌套类）：定义在另一个类（外部类）内部的类，==它可以访问外部类的所有成员，包括私有成员==。<br>类型：<br>成员内部类：类似于外部类的成员，可以在类的方法之外定义，可以是 public, protected, private 或默认访问修饰符。<br>局部内部类：定义在方法、构造器或块内的类，作用域仅限于该方法或构造器。<br>匿名内部类：没有名称的内部类，通常用于简洁地实现接口或抽象类的一个实例。<br>静态内部类（嵌套类）：用 static 关键字声明，不直接与外部类的实例关联，可以像普通类一样创建对象。<br>访问权限：<br>内部类可以直接访问外部类的所有成员，包括私有成员和静态成员。<br>外部类要访问内部类的成员，必须先创建内部类的实例。<br>生命周期：<br>内部类的生命周期与外部类相关联，不能在没有外部类实例的情况下创建内部类的实例（静态内部类除外）。<br>对于非静态内部类，每个内部类对象都隐含地持有一个外部类的引用，可能导致外部类对象无法被垃圾回收。<br>使用场景：<br>内部类常用于封装特定于外部类的逻辑，提供更好的封装性和信息隐藏。<br>静态内部类常用于创建与外部类紧密相关的辅助类，但不需要外部类的实例。<br>编译结果：<br>编译后的 .class 文件，内部类会被编译成单独的文件，名称为外部类名加 $ 内部类名，例如 Outer$Inner.class。<br>内存模型：<br>内部类对象存在于外部类对象的堆内存中，而局部内部类对象存在于方法栈帧中。<br>这些特性使得内部类成为 Java 中一种强大的工具，尤其是在设计模式和复杂逻辑处理中。</p><h3 id="JavaBean-右键pte"><a href="#JavaBean-右键pte" class="headerlink" title="JavaBean(右键pte)"></a>JavaBean(右键pte)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String name;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">            <span class="keyword">private</span> String sex;</span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">GirlFriend</span><span class="params">(String name,<span class="type">int</span> age,String sex)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.name = name;</span><br><span class="line">                <span class="built_in">this</span>.age = age;</span><br><span class="line">                <span class="built_in">this</span>.sex = sex;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.name = name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.age = age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.sex = sex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> sex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>指在一个类中有多个同名方法(参数列表不同)<br>@override方法重写(只有添加到虚方法表的方法才能被重写,重写时子类权限必须大于父类)  this就近原则子类没有找父类</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>将对象的数据(属性)与数据的操作(方法)绑定在一起</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>子类继承父类的公有方法和变量<br>继承:虚方法表(非final static private) super 调用父类</p><h3 id="接口-继承的一种"><a href="#接口-继承的一种" class="headerlink" title="接口(继承的一种)"></a>接口(继承的一种)</h3><p>接口是方法的抽象interface implements(实现)其中方法必须是抽象方法(必须重写)</p><p>protected 的方法在子类也可以使用</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>允许一个接口被多种数据类型实现或一个类可以有多种形态 ,能利用父类的引用或指针来指向子类的对象,从而实现不同对象对同一消息做出不同相应</p><h3 id="强转"><a href="#强转" class="headerlink" title="强转"></a>强转</h3><p>强制转换能使父类转换为真正的子类,从而使用子类私有功能</p><h3 id="泛型-只能是引用数据类型"><a href="#泛型-只能是引用数据类型" class="headerlink" title="泛型(只能是引用数据类型)"></a>泛型(只能是引用数据类型)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;<span class="comment">//泛型类写法</span></span><br><span class="line">     <span class="keyword">private</span> T item;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T item)</span> &#123; <span class="built_in">this</span>.item = item; &#125;</span><br><span class="line">     <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123; <span class="keyword">return</span> item; &#125;</span><br><span class="line"> &#125;<span class="comment">//其中T为泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ListUtil</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(ArrayList&lt;E&gt; list, E[] e)</span><span class="comment">//泛型方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        Collections.addAll(list, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(ArrayList&lt;E&gt; list, E...e)</span><span class="comment">//可变参数里面可以传入多个参数==&gt;三个点</span></span><br><span class="line">    &#123;</span><br><span class="line">        Collections.addAll(list, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型不具备继承性,但数据具备继承性</span></span><br></pre></td></tr></table></figure><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240515142518404.png" alt="image-20240515142518404"></p><h3 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">包（Package）:</span><br><span class="line">包名全部小写，通常采用反向域名的形式，例如：com.example.myproject</span><br><span class="line"></span><br><span class="line">类（Class） 和 接口（Interface）:</span><br><span class="line">首字母大写的驼峰式命名，例如：MyClassName 或 MyInterfaceName</span><br><span class="line"></span><br><span class="line">枚举（Enum）:</span><br><span class="line">同类和接口的命名规则，例如：ColorType</span><br><span class="line"></span><br><span class="line">方法（Method）:</span><br><span class="line">小写字母开头的驼峰式命名，动词开头，例如：methodName 或 doSomething</span><br><span class="line"></span><br><span class="line">变量（Field）:</span><br><span class="line">小写字母开头的驼峰式命名，如果是实例变量，首字母小写，例如：instanceVariable</span><br><span class="line">如果是常量（<span class="keyword">final</span> <span class="keyword">static</span>），则全大写，单词间用下划线分隔，例如：<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> MAX_VALUE</span><br><span class="line"></span><br><span class="line">常量（Constant）:</span><br><span class="line">全部大写字母，单词间用下划线分隔，例如：MY_CONSTANT</span><br><span class="line"></span><br><span class="line">参数（Parameter）:</span><br><span class="line">同变量命名规则，小写字母开头的驼峰式命名，例如：parameterName</span><br><span class="line"></span><br><span class="line">局部变量（Local Variable）:</span><br><span class="line">同变量命名规则，但可以更简洁，只要保持可读性即可</span><br><span class="line"></span><br><span class="line">布尔变量（Boolean Variables）:</span><br><span class="line">避免使用简单的is或has作为布尔变量名，例如：isActive而不是isactive</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="java调试与反编译"><a href="#java调试与反编译" class="headerlink" title="java调试与反编译"></a>java调试与反编译</h3><p>内存查询工具可以使用   终端jps==&gt;jhsdb hsdb</p><p>终端 javap进行反编译</p><ul><li>java文件 + $ + 1.class</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;<span class="comment">//匿名类,继承animal方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;<span class="comment">//匿名类,继承animal方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名类调用吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.eat();<span class="comment">//新建类并调用重写的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Android的开发就有这个应用场景，当我要按一个按钮时会有一个设置监听器的方法来控制交互，里面需要转递一个对象，这里就可以用匿名累，不用额外再创建一个类了，大大简化了开发过程以及提升了开发效率</span><br><span class="line">    </span><br><span class="line">    method(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;狗吃东西&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );<span class="comment">//这样单次调用就不用新建一个新类，大大简化了开发过程以及提升了开发效率</span></span><br></pre></td></tr></table></figure><h2 id="常用API-现成的java类"><a href="#常用API-现成的java类" class="headerlink" title="常用API(现成的java类)"></a>常用API(现成的java类)</h2><h3 id="Math-Math-方法"><a href="#Math-Math-方法" class="headerlink" title="Math(Math.方法)"></a>Math(Math.方法)</h3><ol><li>abs(int)</li><li>ceil(double)向上取整 floor(double)向下取整</li><li>round(float)四舍五入</li><li>random()  [0.0,1.0)</li></ol><p><code>abs(int) ceil(double) floor(double) round(float)</code></p><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><ol><li><p>exit(int status)当status==0时正常停止,非零异常停止</p></li><li><p>arraycopy(ArrayList a,index,arr,index,count)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//把arr1数组中的数据拷贝到arr2中</span><br><span class="line">//参数一：数据源，要拷贝的数据从哪个数组而来</span><br><span class="line">/参数二：从数据源数组中的第几个索引开始拷贝</span><br><span class="line">//参数三：目的地，我要把数据拷贝到哪个数组中</span><br><span class="line">//参数四：目的地数组的索引。</span><br><span class="line">//参数五：拷贝的个数</span><br><span class="line">//System.arraycopy(arr1,0,arr2,0,5);</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>currentTimeMillis()时间戳 可用于加密和计算程序运行时间</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">lastTime</span> <span class="operator">=</span> end - start;</span><br><span class="line">        System.out.println(lastTime);<span class="comment">//用来计算程序运行时间</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static Runtime getRuntime()</span><br><span class="line">当前系统的运行环境对象</span><br><span class="line">public void exit(int status)0</span><br><span class="line">停止虚拟机</span><br><span class="line">public int availableProcessors()</span><br><span class="line">获得cPU的线程数Runtime.getRuntime().availableProcessors() 20线程</span><br><span class="line">public long maxMemory()</span><br><span class="line">JVM能从系统中获取总内存大小（单位byte)  Runtime.getRuntime().maxMemory()/1024/1024 = 4064 也就是最大内存为4G</span><br><span class="line">public long totalMemory()</span><br><span class="line">JVM已经从系统中获取总内存大小（单位byte)  Runtime.getRuntime().totalMemory()/1024/1024</span><br><span class="line">public long freeMemory()</span><br><span class="line">JVM剩余内存大小（单位byte)</span><br><span class="line">public Process exec(string command)</span><br><span class="line">运行cmd命令</span><br></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ol><li><p>toString()</p></li><li><p>equals(Object obj)每个类型都有相应的方法,比较的规则不同</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果没有重写equals方法,默认使用object中的方法比较地址值</span><br><span class="line">重写之后比较对象内部属性值</span><br><span class="line">    Ctrl+insert</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>clone(int a)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">克隆只能被本类和子类使用,使用时必须重写</span><br><span class="line">@Override</span><br><span class="line">protected object clone()&#123;</span><br><span class="line">//调用父类中的c1one方法</span><br><span class="line">//相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去。</span><br><span class="line">return super.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class User implement Cloneable//可被克隆</span><br><span class="line">clone返回object需要进行强转</span><br><span class="line">int data=10;</span><br><span class="line">User u1 =new User(1,sun,pwd,path,data);</span><br><span class="line">User u2 = (User)u1.clone();</span><br><span class="line"></span><br><span class="line">对象克隆分为浅克隆和深克隆</span><br><span class="line">浅克隆:拷贝地址,不管是什么数据类型都完全拷贝过来,改变其中一个的数据,另外一个也会改变(地址)</span><br><span class="line">    深克隆:基本数据类型拷贝过来,字符串复用,引用数据类型重新创建新的(可以重写克隆方法实现深克隆,或者是用第三方包方法进行深克隆)</span><br><span class="line">object中的克隆是浅克隆</span><br><span class="line"></span><br><span class="line">boolean result = Objects.equals(s1,s2);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="BigInteger-BigDecimal"><a href="#BigInteger-BigDecimal" class="headerlink" title="BigInteger BigDecimal"></a>BigInteger BigDecimal</h3><p>==对象一但创建就不能发生改变==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BigInteger原则上可以表示无穷大的整数</span><br><span class="line">BigInteger(int num,Random rnd);取随机大的整数[0~2^num-1]</span><br><span class="line">BigInteger(String val);字符串中必须为整数</span><br><span class="line">BigInteger(String val,int radix);获取指定进制的大整数(比如[22,2]==&gt;其中22是二进制数)</span><br><span class="line"></span><br><span class="line">BigInteger b = BigInteger.valueOf(100);</span><br><span class="line">valueOf(long)</span><br><span class="line"></span><br><span class="line">BigInteger提前把内部常用数字-16~16创建好,如果多次获取不会重写创建新的</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://xiaodi8.com&quot;</span>);</span><br><span class="line"><span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(urlConnection.getInputStream()));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?=8|11|17)&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;Java8,java,jaVa4&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">    System.out.println(matcher.group());<span class="comment">//==&gt;Java,jaVa</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//?:获取所有  ?=获取前面部分 ?!正则 获取不是指定内容的前面部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[[0-9]10|11|12]==&gt;0~12</span></span><br><span class="line"><span class="comment">//+,*为贪婪爬取,可能多的匹配</span></span><br><span class="line"><span class="comment">//+?,*?为非贪婪爬取,尽可能少的爬取</span></span><br><span class="line"><span class="comment">//Java中默认贪婪爬取</span></span><br><span class="line">/^(?:(?:\+|<span class="number">00</span>)<span class="number">86</span>)?<span class="number">1</span>(?:(?:<span class="number">3</span>[\d])|(?:<span class="number">4</span>[<span class="number">5</span>-<span class="number">79</span>])|(?:<span class="number">5</span>[<span class="number">0</span>-<span class="number">35</span>-<span class="number">9</span>])|(?:<span class="number">6</span>[<span class="number">5</span>-<span class="number">7</span>])|(?:<span class="number">7</span>[<span class="number">0</span>-<span class="number">8</span>])|(?:<span class="number">8</span>[\d])|(?:<span class="number">9</span>[<span class="number">189</span>]))\d&#123;<span class="number">8</span>&#125;$/</span><br><span class="line">  (.+).\\<span class="number">1</span> ==&gt; 其中\\<span class="number">1</span>表示第一组,以第一个(为第一组,((.)\\<span class="number">2</span>*)这里的二指的是(.)</span><br><span class="line">                               </span><br><span class="line">                              </span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>,<span class="string">&quot;$1&quot;</span>);<span class="comment">//去重</span></span><br><span class="line"><span class="comment">//(.)表示把第一个重复的字符看成一组</span></span><br><span class="line"><span class="comment">//\\1 表示第一组再次出现</span></span><br><span class="line"><span class="comment">//+ 表示至少一次</span></span><br><span class="line"><span class="comment">//$1 表示把正则表达式中的第一组拿来用</span></span><br><span class="line"><span class="comment">//正则内用\\1正则外用$1  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.解析成一个date对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;2021-01-01&quot;</span>;</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> sdf1.parse(str1);</span><br><span class="line"><span class="comment">//2.格式化</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sdf2.format(date1);</span><br><span class="line">System.out.println(str2)</span><br></pre></td></tr></table></figure><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>使用lambda的对象必须是函数接口类型(即一个接口只有一个方法)</p><h3 id="Collections-集合API"><a href="#Collections-集合API" class="headerlink" title="Collections  ( 集合API )"></a>Collections  ( 集合API )</h3><ol><li>boolean addAll(Collection<T>c,T…elements)</li><li>void shuffle (List&lt;?&gt; list)  打乱顺序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt;list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;adc&quot;</span>,<span class="string">&quot;adf&quot;</span>,<span class="string">&quot;afd&quot;</span>,<span class="string">&quot;dfasdf&quot;</span>,<span class="string">&quot;326&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="集合-Collection"><a href="#集合-Collection" class="headerlink" title="集合(Collection)"></a>集合(Collection)</h3><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240514190113288.png" alt="image-20240514190113288"></p><h4 id="list系列集合："><a href="#list系列集合：" class="headerlink" title="list系列集合："></a>list系列集合：</h4><p>添加的元素是有序(录入)、可重复、有索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="set系列集合"><a href="#set系列集合" class="headerlink" title="set系列集合:"></a>set系列集合:</h4><p>  添加的元素是无序，不重复，无索引的</p><p>.add()<br>.contains(“STRING”)<br>.size()</p><p>列表迭代器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListIterator&lt;String&gt; iterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;b&quot;</span>))&#123;</span><br><span class="line">                iterator.remove();<span class="comment">//iterator.add(&quot;qqq&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>集合遍历</p><ol><li><p>Iterator<E>iterator</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>增强for</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : collection) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//s是临时变量,如果修改了增强for中的变量是不会改变集合中原本的数据</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Lambda遍历</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.forEach(s-&gt;System.out.println(s));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt;set1=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Set&lt;String&gt; set = list.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>==三种通用的遍历方式：<br>迭代器：在遍历的过程中需要删除元素，请使用迭代器。<br>增强for、Lambda:   仅仅想遍历，那么使用增强for或Lambda表达式==</p><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240514200830393.png" alt="image-20240514200830393"></p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240523123556294.png" alt="image-20240523123556294"></p><p>==Map是双列集合的顶层接口,他的功能是全部双列集合继承使用的==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Map集合对象</span></span><br><span class="line">      Map&lt;String,String&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//添加元素</span></span><br><span class="line">      <span class="comment">//put 添加和覆盖</span></span><br><span class="line">      <span class="comment">//如果键不存在则添加,返回null</span></span><br><span class="line">      <span class="comment">// 如果键存在则覆盖,并把原有的数据返回</span></span><br><span class="line">      m.put(<span class="string">&quot;Leo&quot;</span>,<span class="string">&quot;Ann&quot;</span>);</span><br><span class="line">      m.put(<span class="string">&quot;Luck&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> m.put(<span class="string">&quot;Anna&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      System.out.println(s);<span class="comment">//原数据中没有anna，所以返回null</span></span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.put(<span class="string">&quot;Luck&quot;</span>,<span class="string">&quot;Fuck&quot;</span>);</span><br><span class="line">      System.out.println(s1);</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> m.remove(<span class="string">&quot;Leo&quot;</span>);</span><br><span class="line">      System.out.println(result);</span><br><span class="line">      <span class="comment">//删除返回被删除的值</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> m.remove(<span class="string">&quot;Luck&quot;</span>);</span><br><span class="line">      System.out.println(s2);</span><br><span class="line">      <span class="comment">//判断键是否存在</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">valueResult</span> <span class="operator">=</span> m.containsValue(<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      System.out.println(valueResult);</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isResult</span> <span class="operator">=</span> m.isEmpty();</span><br><span class="line">      <span class="keyword">if</span>(isResult)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;集合为空&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;集合不为空&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(m);</span><br><span class="line"></span><br><span class="line">      Map&lt;String,String&gt;map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;Leo&quot;</span>,<span class="string">&quot;Ann&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;Luck&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;Anna&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">      Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//增强for循环遍历</span></span><br><span class="line">      <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">          System.out.println(key);</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//lambda表达式遍历</span></span><br><span class="line">      map.keySet().forEach(key-&gt;&#123;</span><br><span class="line">          System.out.println(key);</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//迭代器遍历</span></span><br><span class="line">      Iterator&lt;String&gt; it = map.keySet().iterator();</span><br><span class="line">      <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> it.next();</span><br><span class="line">          System.out.println(key);</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//增强for循环遍历</span></span><br><span class="line">      Set&lt;Map.Entry&lt;String,String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : entrySet) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; entry : map.entrySet())&#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//lambda表达式遍历</span></span><br><span class="line">      map.forEach(<span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;String, String&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">              System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">      map.forEach((String key,String value)-&gt;&#123;</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240523124332017.png" alt="image-20240523124332017"></p><h3 id="二叉树-BinaryTree"><a href="#二叉树-BinaryTree" class="headerlink" title="二叉树(BinaryTree)"></a>二叉树(BinaryTree)</h3><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240515154357633.png" alt="image-20240515154357633"></p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>Alt + enter 一键补全</p><p>Alt + insert 一键初始化改写</p><p>Ctrl + n 查找类名源代码</p><p>Ctrl + b 查看源代码</p><p>Ctrl + Alt + m 代码提取，封装成方法</p><p>Ctrl + Alt + ← 回到上一个源码类</p><p>Ctrl + F12 查找用法</p><p>Ctrl + Alt + l 规范代码</p><p>Alt + 7 查看代码结构</p><p>Ctrl AIT v <code>Runtime.getRuntime();===&gt;Runtime runtime = Runtime.getRuntime();</code></p><h2 id="添加依赖-导包"><a href="#添加依赖-导包" class="headerlink" title="添加依赖(导包)"></a>添加依赖(导包)</h2><p>在根目录新建lib文件夹,导入代码,并右键点击add as library</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/25/Hello-world/"/>
      <url>/2024/03/25/Hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
